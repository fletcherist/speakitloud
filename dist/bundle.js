/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_nosleep_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_nosleep_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_nosleep_js__);


const $input = document.querySelector('#input-textarea');
const $button = document.querySelector('#button');

const $incrementSpeedButton = document.querySelector('#increment-speed');
const $decrementSpeedButton = document.querySelector('#decrement-speed');

const ALPHABET = {
  'ru-RU': {
    unicode: [1072, 1103]
  },
  'number': {
    unicode: [48, 57]
  }

  // when speaking speed is 1
};const DEFAULT_WORDS_PER_MINUTE = 117.6;
const MIN_SPEED = 0.52;

// fp composition & pipe helpers
const pipe = (fn, ...fns) => (...args) => fns.reduce((result, fn) => fn(result), fn(...args));
const compose = (...fns) => (...args) => pipe(...fns.reverse())(...args);

const concat = list => Array.prototype.concat.bind(list);
const promiseConcat = f => x => f().then(concat(x));
const promiseReduce = (acc, x) => acc.then(promiseConcat(x));
/*
 * serial executes Promises sequentially.
 * @param {funcs} An array of funcs that return promises.
 * @example
 * const urls = ['/url1', '/url2', '/url3']
 * serial(urls.map(url => () => $.ajax(url)))
 *     .then(console.log.bind(console))
 */
const serial = funcs => funcs.reduce(promiseReduce, Promise.resolve([]));

class Speaker {
  constructor() {
    this.synth = window.speechSynthesis;
    this.isSpeaking = false;
    this.isChangingSpeed = false;
    this.currentSpeed = 1.1;
  }

  // constructor () {
  //   super()
  //   this.synth.onvoicechanged = event => console.log(event)
  //   this.synth.onvoiceschanged = event => console.log(event)
  // }
  speak(utter) {
    if (!utter && !this.currentUtterance) return false;
    this.currentUtterance = utter || this.currentUtterance;
    this.currentUtterance.rate = this.currentSpeed;
    this.play();
    this.synth.speak(this.currentUtterance);
    console.log(this.synth);
  }
  stop() {
    this.currentUtterance = null;
    // this.synth.cancel()
  }

  setSpeed(value) {
    // this.currentUtterance.rate = value
    // this.speak()
  }
  play() {
    this.isSpeaking = true;
    this.synth.resume();
  }
  pause() {
    this.isSpeaking = false;
    this.synth.pause();
  }
  playPause() {
    this.isSpeaking = !this.isSpeaking;
    this.isSpeaking ? this.synth.pause() : this.synth.resume();
  }
  _changeSpeed(delta) {
    this.synth.cancel();
    this.currentSpeed = delta > 0 ? this.currentSpeed + delta : this.currentSpeed <= MIN_SPEED ? MIN_SPEED : this.currentSpeed + delta;
    this.isChangingSpeed = true;
    this.speak();
    console.log(this.currentSpeed);
  }
  incrementSpeed() {
    this._changeSpeed(0.1);
  }
  decrementSpeed() {
    this._changeSpeed(-0.1);
  }
}

const app = {
  version: '0.0.3',
  getVersion() {
    console.log(this.version);
  },
  speaker: new Speaker(),
  currentUtteranceIndex: 0,
  noSleep: new __WEBPACK_IMPORTED_MODULE_0_nosleep_js___default.a(),
  sentences: []
};
window.app = app;

/*
 * Analyses the first letter in the word
 * Now it can guess between cyrilic and latin letter only
 */
const detectLangByStr = str => {
  let currentCharIndex = 0;
  let maxCharIndex = 3;

  while (currentCharIndex <= maxCharIndex) {
    const charCode = str.toLowerCase().charCodeAt(currentCharIndex);
    for (let alphabet in ALPHABET) {
      if (charCode >= ALPHABET[alphabet].unicode[0] && charCode <= ALPHABET[alphabet].unicode[1]) {
        return alphabet;
      }
    }
    currentCharIndex++;
  }

  return 'en';
};

/*
 * If the words are in the same language, returns truw
 * If one of the words is number, returns true
 * Otherwise, returns false
 */

const isTheSameLanguage = (word1, word2) => word1.lang === word2.lang || [word1.lang, word2.lang].includes('number');

const joinOneLanguageWords = words => {
  const sentences = [];
  words.forEach(word => {
    if (sentences.length === 0) return sentences.push(word);
    const previousWord = sentences[sentences.length - 1];
    isTheSameLanguage(previousWord, word) ? sentences[sentences.length - 1].token = [sentences[sentences.length - 1].token, word.token].join(' ') : sentences.push(word);
  });
  return sentences;
};

const formatText = text => text.replace(/\â€“/g, '.');
const splitTextIntoSentences = text => text.split('.');
const splitSentenceIntoWords = sentence => sentence.split(' ');
const countWordsInText = text => splitSentenceIntoWords(text).length;
const convertWordsIntoTokens = words => words.map(token => ({
  lang: detectLangByStr(token),
  token: token
}));
const filterWordsArray = words => words.filter(word => word.token.length !== 0);

/*
 * A Medium-like function calculates time left reading
 */
const timeLeftReading = (text, speed = 1) => countWordsInText(text) / (DEFAULT_WORDS_PER_MINUTE * speed);

const createSpeakEvent = sentence => {
  const utterThis = new SpeechSynthesisUtterance(sentence.token);
  utterThis.lang = sentence.lang;
  utterThis.rate = 1.9;
  return utterThis;
};

const createSpeakEvents = parts => parts.map(createSpeakEvent);

const transformSpeakEventsIntoCallbacks = speakEvents => speakEvents.map(speakEvent => () => new Promise(resolve => {
  // speakEvent.onEnd = resolve(() => )
}));

const concatSpeakEventsSentences = speakEventsSentences => speakEventsSentences.reduce((a, b) => a.concat(b), []);

app.speakItLoud = () => {
  const text = formatText($input.innerText.trim());
  const sentences = splitTextIntoSentences(text);
  console.log(sentences);

  console.log('timeLeftReading', timeLeftReading(text, app.speaker.currentSpeed));

  app.sentences = sentences;

  const textTokensArray = sentences.map(sentence => compose(filterWordsArray, convertWordsIntoTokens, splitSentenceIntoWords)(sentence));

  // const logAndContinue = (args) => { console.log(args); return args }
  const speakEventsSentences = textTokensArray.map(textTokens => compose(
  // transformSpeakEventsIntoPromises,
  createSpeakEvents, joinOneLanguageWords)(textTokens));

  const promises = [];
  concatSpeakEventsSentences(speakEventsSentences).forEach(phrase => promises.push(() => new Promise((resolve, reject) => {
    app.speaker.speak(phrase);
    app.currentUtteranceIndex = app.currentUtteranceIndex + 1;
    $input.innerHTML = $input.innerText.replace(new RegExp(phrase.text), `<mark>${phrase.text}</mark>`);

    console.log(app.currentUtteranceIndex);
    phrase.onend = () => {
      if (app.speaker.isChangingSpeed) {
        app.speaker.isChangingSpeed = false;
        return;
      }
      console.log('phrase endend');
      return resolve(phrase.text);
    };
  })));

  console.time('read');
  serial(promises).then(() => console.timeEnd('read'));
};

$button.addEventListener('click', event => {
  console.log('clicked');
  app.noSleep.enable();
  app.speakItLoud();
});

console.log(app.speaker);
window.addEventListener('beforeunload', event => {
  console.log(app.speaker.stop());
});

document.addEventListener('keydown', event => {
  // If space is pressed
  if (event.keyCode === 32) {
    app.speaker.playPause();
  }
});

$input.focus();
$incrementSpeedButton.addEventListener('click', event => {
  app.speaker.incrementSpeed();
});

$decrementSpeedButton.addEventListener('click', event => {
  app.speaker.decrementSpeed();
});

$input.addEventListener('paste', event => {
  event.preventDefault();

  let pastedText = '';
  if (window.clipboardData && window.clipboardData.getData) {
    // IE
    pastedText = window.clipboardData.getData('Text');
  } else if (event.clipboardData && event.clipboardData.getData) {
    pastedText = event.clipboardData.getData('text/html');
  }

  const hiddenInput = document.createElement('div');
  hiddenInput.innerHTML = pastedText;

  const text = hiddenInput.textContent;

  $input.innerHTML = text;
  console.log(text);
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

const mediaFile = __webpack_require__(2)

// Detect iOS browsers < version 10
const oldIOS = typeof navigator !== 'undefined' && parseFloat(
  ('' + (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1])
    .replace('undefined', '3_2').replace('_', '.').replace('_', '')
) < 10 && !window.MSStream

class NoSleep {
  constructor () {
    if (oldIOS) {
      this.noSleepTimer = null
    } else {
      // Set up no sleep video element
      this.noSleepVideo = document.createElement('video')

      this.noSleepVideo.setAttribute('playsinline', '')
      this.noSleepVideo.setAttribute('src', mediaFile)

      this.noSleepVideo.addEventListener('timeupdate', function (e) {
        if (this.noSleepVideo.currentTime > 0.5) {
          this.noSleepVideo.currentTime = Math.random()
        }
      }.bind(this))
    }
  }

  enable () {
    if (oldIOS) {
      this.disable()
      this.noSleepTimer = window.setInterval(function () {
        window.location.href = '/'
        window.setTimeout(window.stop, 0)
      }, 15000)
    } else {
      this.noSleepVideo.play()
    }
  }

  disable () {
    if (oldIOS) {
      if (this.noSleepTimer) {
        window.clearInterval(this.noSleepTimer)
        this.noSleepTimer = null
      }
    } else {
      this.noSleepVideo.pause()
    }
  }
};

module.exports = NoSleep


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = 'data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACKBtZGF0AAAC8wYF///v3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE0MiByMjQ3OSBkZDc5YTYxIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTEgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9MiBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0wIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MCA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0wIHRocmVhZHM9NiBsb29rYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFjZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJhbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdlaWdodHA9MSBrZXlpbnQ9MzAwIGtleWludF9taW49MzAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD0xMCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIwLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IHZidl9tYXhyYXRlPTIwMDAwIHZidl9idWZzaXplPTI1MDAwIGNyZl9tYXg9MC4wIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAOWWIhAA3//p+C7v8tDDSTjf97w55i3SbRPO4ZY+hkjD5hbkAkL3zpJ6h/LR1CAABzgB1kqqzUorlhQAAAAxBmiQYhn/+qZYADLgAAAAJQZ5CQhX/AAj5IQAD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'


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgN2Q3MDNmNjc3ZDk1MWNlYzllMmEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3NsZWVwLmpzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9zbGVlcC5qcy9zcmMvbWVkaWEuanMiXSwibmFtZXMiOlsiJGlucHV0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiJGJ1dHRvbiIsIiRpbmNyZW1lbnRTcGVlZEJ1dHRvbiIsIiRkZWNyZW1lbnRTcGVlZEJ1dHRvbiIsIkFMUEhBQkVUIiwidW5pY29kZSIsIkRFRkFVTFRfV09SRFNfUEVSX01JTlVURSIsIk1JTl9TUEVFRCIsInBpcGUiLCJmbiIsImZucyIsImFyZ3MiLCJyZWR1Y2UiLCJyZXN1bHQiLCJjb21wb3NlIiwicmV2ZXJzZSIsImNvbmNhdCIsImxpc3QiLCJBcnJheSIsInByb3RvdHlwZSIsImJpbmQiLCJwcm9taXNlQ29uY2F0IiwiZiIsIngiLCJ0aGVuIiwicHJvbWlzZVJlZHVjZSIsImFjYyIsInNlcmlhbCIsImZ1bmNzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJTcGVha2VyIiwic3ludGgiLCJ3aW5kb3ciLCJzcGVlY2hTeW50aGVzaXMiLCJpc1NwZWFraW5nIiwiaXNDaGFuZ2luZ1NwZWVkIiwiY3VycmVudFNwZWVkIiwic3BlYWsiLCJ1dHRlciIsImN1cnJlbnRVdHRlcmFuY2UiLCJyYXRlIiwicGxheSIsImNvbnNvbGUiLCJsb2ciLCJzdG9wIiwic2V0U3BlZWQiLCJ2YWx1ZSIsInJlc3VtZSIsInBhdXNlIiwicGxheVBhdXNlIiwiX2NoYW5nZVNwZWVkIiwiZGVsdGEiLCJjYW5jZWwiLCJpbmNyZW1lbnRTcGVlZCIsImRlY3JlbWVudFNwZWVkIiwiYXBwIiwidmVyc2lvbiIsImdldFZlcnNpb24iLCJzcGVha2VyIiwiY3VycmVudFV0dGVyYW5jZUluZGV4Iiwibm9TbGVlcCIsInNlbnRlbmNlcyIsImRldGVjdExhbmdCeVN0ciIsInN0ciIsImN1cnJlbnRDaGFySW5kZXgiLCJtYXhDaGFySW5kZXgiLCJjaGFyQ29kZSIsInRvTG93ZXJDYXNlIiwiY2hhckNvZGVBdCIsImFscGhhYmV0IiwiaXNUaGVTYW1lTGFuZ3VhZ2UiLCJ3b3JkMSIsIndvcmQyIiwibGFuZyIsImluY2x1ZGVzIiwiam9pbk9uZUxhbmd1YWdlV29yZHMiLCJ3b3JkcyIsImZvckVhY2giLCJ3b3JkIiwibGVuZ3RoIiwicHVzaCIsInByZXZpb3VzV29yZCIsInRva2VuIiwiam9pbiIsImZvcm1hdFRleHQiLCJ0ZXh0IiwicmVwbGFjZSIsInNwbGl0VGV4dEludG9TZW50ZW5jZXMiLCJzcGxpdCIsInNwbGl0U2VudGVuY2VJbnRvV29yZHMiLCJzZW50ZW5jZSIsImNvdW50V29yZHNJblRleHQiLCJjb252ZXJ0V29yZHNJbnRvVG9rZW5zIiwibWFwIiwiZmlsdGVyV29yZHNBcnJheSIsImZpbHRlciIsInRpbWVMZWZ0UmVhZGluZyIsInNwZWVkIiwiY3JlYXRlU3BlYWtFdmVudCIsInV0dGVyVGhpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsImNyZWF0ZVNwZWFrRXZlbnRzIiwicGFydHMiLCJ0cmFuc2Zvcm1TcGVha0V2ZW50c0ludG9DYWxsYmFja3MiLCJzcGVha0V2ZW50cyIsInNwZWFrRXZlbnQiLCJjb25jYXRTcGVha0V2ZW50c1NlbnRlbmNlcyIsInNwZWFrRXZlbnRzU2VudGVuY2VzIiwiYSIsImIiLCJzcGVha0l0TG91ZCIsImlubmVyVGV4dCIsInRyaW0iLCJ0ZXh0VG9rZW5zQXJyYXkiLCJ0ZXh0VG9rZW5zIiwicHJvbWlzZXMiLCJwaHJhc2UiLCJyZWplY3QiLCJpbm5lckhUTUwiLCJSZWdFeHAiLCJvbmVuZCIsInRpbWUiLCJ0aW1lRW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZW5hYmxlIiwia2V5Q29kZSIsImZvY3VzIiwicHJldmVudERlZmF1bHQiLCJwYXN0ZWRUZXh0IiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJoaWRkZW5JbnB1dCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQzVEQTs7QUFFQSxNQUFNQSxTQUFTQyxTQUFTQyxhQUFULENBQXVCLGlCQUF2QixDQUFmO0FBQ0EsTUFBTUMsVUFBVUYsU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFoQjs7QUFFQSxNQUFNRSx3QkFBd0JILFNBQVNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQTlCO0FBQ0EsTUFBTUcsd0JBQXdCSixTQUFTQyxhQUFULENBQXVCLGtCQUF2QixDQUE5Qjs7QUFFQSxNQUFNSSxXQUFXO0FBQ2YsV0FBUztBQUNQQyxhQUFTLENBQUMsSUFBRCxFQUFPLElBQVA7QUFERixHQURNO0FBSWYsWUFBVTtBQUNSQSxhQUFTLENBQUMsRUFBRCxFQUFLLEVBQUw7QUFERDs7QUFLWjtBQVRpQixDQUFqQixDQVVBLE1BQU1DLDJCQUEyQixLQUFqQztBQUNBLE1BQU1DLFlBQVksSUFBbEI7O0FBRUE7QUFDQSxNQUFNQyxPQUFPLENBQUNDLEVBQUQsRUFBSyxHQUFHQyxHQUFSLEtBQWdCLENBQUMsR0FBR0MsSUFBSixLQUFhRCxJQUFJRSxNQUFKLENBQVcsQ0FBQ0Ms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QVQsQ0FBdUIsS0FBdkIsQ0FBcEI7QUFDQUQsY0FBWWQsU0FBWixHQUF3QlcsVUFBeEI7O0FBRUEsUUFBTTVDLE9BQU8rQyxZQUFZRSxXQUF6Qjs7QUFFQXpJLFNBQU95SCxTQUFQLEdBQW1CakMsSUFBbkI7QUFDQTNDLFVBQVFDLEdBQVIsQ0FBWTBDLElBQVo7QUFDRCxDQWpCRCxFOzs7Ozs7QUM1UUE7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQixJQUFJLFFBQVEsSUFBSTtBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ25EQSxpQ0FBaUMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgN2Q3MDNmNjc3ZDk1MWNlYzllMmEiLCIvLyBAZmxvd1xuaW1wb3J0IE5vU2xlZXAgZnJvbSAnbm9zbGVlcC5qcydcblxuY29uc3QgJGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2lucHV0LXRleHRhcmVhJylcbmNvbnN0ICRidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnV0dG9uJylcblxuY29uc3QgJGluY3JlbWVudFNwZWVkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2luY3JlbWVudC1zcGVlZCcpXG5jb25zdCAkZGVjcmVtZW50U3BlZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGVjcmVtZW50LXNwZWVkJylcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gICdydS1SVSc6IHtcbiAgICB1bmljb2RlOiBbMTA3MiwgMTEwM11cbiAgfSxcbiAgJ251bWJlcic6IHtcbiAgICB1bmljb2RlOiBbNDgsIDU3XVxuICB9XG59XG5cbi8vIHdoZW4gc3BlYWtpbmcgc3BlZWQgaXMgMVxuY29uc3QgREVGQVVMVF9XT1JEU19QRVJfTUlOVVRFID0gMTE3LjZcbmNvbnN0IE1JTl9TUEVFRCA9IDAuNTJcblxuLy8gZnAgY29tcG9zaXRpb24gJiBwaXBlIGhlbHBlcnNcbmNvbnN0IHBpcGUgPSAoZm4sIC4uLmZucykgPT4gKC4uLmFyZ3MpID0+IGZucy5yZWR1Y2UoKHJlc3VsdCwgZm4pID0+IGZuKHJlc3VsdCksIGZuKC4uLmFyZ3MpKVxuY29uc3QgY29tcG9zZSA9ICguLi5mbnMpID0+ICguLi5hcmdzKSA9PiBwaXBlKC4uLmZucy5yZXZlcnNlKCkpKC4uLmFyZ3MpXG5cbmNvbnN0IGNvbmNhdCA9IGxpc3QgPT4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5iaW5kKGxpc3QpXG5jb25zdCBwcm9taXNlQ29uY2F0ID0gZiA9PiB4ID0+IGYoKS50aGVuKGNvbmNhdCh4KSlcbmNvbnN0IHByb21pc2VSZWR1Y2UgPSAoYWNjLCB4KSA9PiBhY2MudGhlbihwcm9taXNlQ29uY2F0KHgpKVxuLypcbiAqIHNlcmlhbCBleGVjdXRlcyBQcm9taXNlcyBzZXF1ZW50aWFsbHkuXG4gKiBAcGFyYW0ge2Z1bmNzfSBBbiBhcnJheSBvZiBmdW5jcyB0aGF0IHJldHVybiBwcm9taXNlcy5cbiAqIEBleGFtcGxlXG4gKiBjb25zdCB1cmxzID0gWycvdXJsMScsICcvdXJsMicsICcvdXJsMyddXG4gKiBzZXJpYWwodXJscy5tYXAodXJsID0+ICgpID0+ICQuYWpheCh1cmwpKSlcbiAqICAgICAudGhlbihjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpKVxuICovXG5jb25zdCBzZXJpYWwgPSBmdW5jcyA9PiBmdW5jcy5yZWR1Y2UocHJvbWlzZVJlZHVjZSwgUHJvbWlzZS5yZXNvbHZlKFtdKSlcblxuY2xhc3MgU3BlYWtlciB7XG4gIHN5bnRoID0gd2luZG93LnNwZWVjaFN5bnRoZXNpc1xuICBjdXJyZW50VXR0ZXJhbmNlOiBPYmplY3RcbiAgaXNTcGVha2luZzogYm9vbGVhbiA9IGZhbHNlXG4gIGlzQ2hhbmdpbmdTcGVlZDogYm9vbGVhbiA9IGZhbHNlXG4gIGN1cnJlbnRTcGVlZDogbnVtYmVyID0gMS4xXG5cbiAgLy8gY29uc3RydWN0b3IgKCkge1xuICAvLyAgIHN1cGVyKClcbiAgLy8gICB0aGlzLnN5bnRoLm9udm9pY2VjaGFuZ2VkID0gZXZlbnQgPT4gY29uc29sZS5sb2coZXZlbnQpXG4gIC8vICAgdGhpcy5zeW50aC5vbnZvaWNlc2NoYW5nZWQgPSBldmVudCA9PiBjb25zb2xlLmxvZyhldmVudClcbiAgLy8gfVxuICBzcGVhayAodXR0ZXIpIHtcbiAgICBpZiAoIXV0dGVyICYmICF0aGlzLmN1cnJlbnRVdHRlcmFuY2UpIHJldHVybiBmYWxzZVxuICAgIHRoaXMuY3VycmVudFV0dGVyYW5jZSA9IHV0dGVyIHx8IHRoaXMuY3VycmVudFV0dGVyYW5jZVxuICAgIHRoaXMuY3VycmVudFV0dGVyYW5jZS5yYXRlID0gdGhpcy5jdXJyZW50U3BlZWRcbiAgICB0aGlzLnBsYXkoKVxuICAgIHRoaXMuc3ludGguc3BlYWsodGhpcy5jdXJyZW50VXR0ZXJhbmNlKVxuICAgIGNvbnNvbGUubG9nKHRoaXMuc3ludGgpXG4gIH1cbiAgc3RvcCAoKSB7XG4gICAgdGhpcy5jdXJyZW50VXR0ZXJhbmNlID0gbnVsbFxuICAgIC8vIHRoaXMuc3ludGguY2FuY2VsKClcbiAgfVxuXG4gIHNldFNwZWVkICh2YWx1ZTogbnVtYmVyKSB7XG4gICAgLy8gdGhpcy5jdXJyZW50VXR0ZXJhbmNlLnJhdGUgPSB2YWx1ZVxuICAgIC8vIHRoaXMuc3BlYWsoKVxuICB9XG4gIHBsYXkgKCkge1xuICAgIHRoaXMuaXNTcGVha2luZyA9IHRydWVcbiAgICB0aGlzLnN5bnRoLnJlc3VtZSgpXG4gIH1cbiAgcGF1c2UgKCkge1xuICAgIHRoaXMuaXNTcGVha2luZyA9IGZhbHNlXG4gICAgdGhpcy5zeW50aC5wYXVzZSgpXG4gIH1cbiAgcGxheVBhdXNlICgpIHtcbiAgICB0aGlzLmlzU3BlYWtpbmcgPSAhdGhpcy5pc1NwZWFraW5nXG4gICAgdGhpcy5pc1NwZWFraW5nID8gdGhpcy5zeW50aC5wYXVzZSgpIDogdGhpcy5zeW50aC5yZXN1bWUoKVxuICB9XG4gIF9jaGFuZ2VTcGVlZCAoZGVsdGE6IG51bWJlcikge1xuICAgIHRoaXMuc3ludGguY2FuY2VsKClcbiAgICB0aGlzLmN1cnJlbnRTcGVlZCA9IGRlbHRhID4gMFxuICAgICAgPyB0aGlzLmN1cnJlbnRTcGVlZCArIGRlbHRhXG4gICAgICA6IHRoaXMuY3VycmVudFNwZWVkIDw9IE1JTl9TUEVFRCA/IE1JTl9TUEVFRCA6IHRoaXMuY3VycmVudFNwZWVkICsgZGVsdGFcbiAgICB0aGlzLmlzQ2hhbmdpbmdTcGVlZCA9IHRydWVcbiAgICB0aGlzLnNwZWFrKClcbiAgICBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbnRTcGVlZClcbiAgfVxuICBpbmNyZW1lbnRTcGVlZCAoKSB7IHRoaXMuX2NoYW5nZVNwZWVkKDAuMSkgfVxuICBkZWNyZW1lbnRTcGVlZCAoKSB7IHRoaXMuX2NoYW5nZVNwZWVkKC0wLjEpIH1cbn1cblxuY29uc3QgYXBwID0ge1xuICB2ZXJzaW9uOiAnMC4wLjMnLFxuICBnZXRWZXJzaW9uICgpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnZlcnNpb24pXG4gIH0sXG4gIHNwZWFrZXI6IG5ldyBTcGVha2VyKCksXG4gIGN1cnJlbnRVdHRlcmFuY2VJbmRleDogMCxcbiAgbm9TbGVlcDogbmV3IE5vU2xlZXAoKSxcbiAgc2VudGVuY2VzOiBbXVxufVxud2luZG93LmFwcCA9IGFwcFxuXG4vKlxuICogQW5hbHlzZXMgdGhlIGZpcnN0IGxldHRlciBpbiB0aGUgd29yZFxuICogTm93IGl0IGNhbiBndWVzcyBiZXR3ZWVuIGN5cmlsaWMgYW5kIGxhdGluIGxldHRlciBvbmx5XG4gKi9cbmNvbnN0IGRldGVjdExhbmdCeVN0ciA9IChzdHI6IHN0cmluZykgPT4ge1xuICBsZXQgY3VycmVudENoYXJJbmRleCA9IDBcbiAgbGV0IG1heENoYXJJbmRleCA9IDNcblxuICB3aGlsZSAoY3VycmVudENoYXJJbmRleCA8PSBtYXhDaGFySW5kZXgpIHtcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci50b0xvd2VyQ2FzZSgpLmNoYXJDb2RlQXQoY3VycmVudENoYXJJbmRleClcbiAgICBmb3IgKGxldCBhbHBoYWJldCBpbiBBTFBIQUJFVCkge1xuICAgICAgaWYgKGNoYXJDb2RlID49IEFMUEhBQkVUW2FscGhhYmV0XS51bmljb2RlWzBdICYmXG4gICAgICAgICAgY2hhckNvZGUgPD0gQUxQSEFCRVRbYWxwaGFiZXRdLnVuaWNvZGVbMV0pIHtcbiAgICAgICAgcmV0dXJuIGFscGhhYmV0XG4gICAgICB9XG4gICAgfVxuICAgIGN1cnJlbnRDaGFySW5kZXgrK1xuICB9XG5cbiAgcmV0dXJuICdlbidcbn1cblxuLypcbiAqIElmIHRoZSB3b3JkcyBhcmUgaW4gdGhlIHNhbWUgbGFuZ3VhZ2UsIHJldHVybnMgdHJ1d1xuICogSWYgb25lIG9mIHRoZSB3b3JkcyBpcyBudW1iZXIsIHJldHVybnMgdHJ1ZVxuICogT3RoZXJ3aXNlLCByZXR1cm5zIGZhbHNlXG4gKi9cbnR5cGUgd29yZFR5cGUgPSB7XG4gIGxhbmc6IHN0cmluZyxcbiAgdG9rZW46IHN0cmluZ1xufVxuY29uc3QgaXNUaGVTYW1lTGFuZ3VhZ2UgPSAoXG4gIHdvcmQxOiB3b3JkVHlwZSxcbiAgd29yZDI6IHdvcmRUeXBlXG4pID0+IHdvcmQxLmxhbmcgPT09IHdvcmQyLmxhbmcgfHxcbiAgW3dvcmQxLmxhbmcsIHdvcmQyLmxhbmddLmluY2x1ZGVzKCdudW1iZXInKVxuXG5jb25zdCBqb2luT25lTGFuZ3VhZ2VXb3JkcyA9ICh3b3JkczogQXJyYXk8d29yZFR5cGU+KTogQXJyYXk8d29yZFR5cGU+ID0+IHtcbiAgY29uc3Qgc2VudGVuY2VzID0gW11cbiAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcbiAgICBpZiAoc2VudGVuY2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHNlbnRlbmNlcy5wdXNoKHdvcmQpXG4gICAgY29uc3QgcHJldmlvdXNXb3JkID0gc2VudGVuY2VzW3NlbnRlbmNlcy5sZW5ndGggLSAxXVxuICAgIGlzVGhlU2FtZUxhbmd1YWdlKHByZXZpb3VzV29yZCwgd29yZClcbiAgICAgID8gc2VudGVuY2VzW3NlbnRlbmNlcy5sZW5ndGggLSAxXS50b2tlbiA9XG4gICAgICAgICAgW3NlbnRlbmNlc1tzZW50ZW5jZXMubGVuZ3RoIC0gMV0udG9rZW4sIHdvcmQudG9rZW5dLmpvaW4oJyAnKVxuICAgICAgOiBzZW50ZW5jZXMucHVzaCh3b3JkKVxuICB9KVxuICByZXR1cm4gc2VudGVuY2VzXG59XG5cbmNvbnN0IGZvcm1hdFRleHQgPSAodGV4dDogc3RyaW5nKSA9PiB0ZXh0LnJlcGxhY2UoL1xc4oCTL2csICcuJylcbmNvbnN0IHNwbGl0VGV4dEludG9TZW50ZW5jZXMgPSAodGV4dDogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiA9PiB0ZXh0LnNwbGl0KCcuJylcbmNvbnN0IHNwbGl0U2VudGVuY2VJbnRvV29yZHMgPSAoc2VudGVuY2U6IHN0cmluZyk6IEFycmF5PHN0cmluZz4gPT4gc2VudGVuY2Uuc3BsaXQoJyAnKVxuY29uc3QgY291bnRXb3Jkc0luVGV4dCA9ICh0ZXh0OiBzdHJpbmcpID0+IHNwbGl0U2VudGVuY2VJbnRvV29yZHModGV4dCkubGVuZ3RoXG5jb25zdCBjb252ZXJ0V29yZHNJbnRvVG9rZW5zID0gKHdvcmRzOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8d29yZFR5cGU+ID0+XG4gIHdvcmRzLm1hcCgodG9rZW46IHN0cmluZykgPT4gKHtcbiAgICBsYW5nOiBkZXRlY3RMYW5nQnlTdHIodG9rZW4pLFxuICAgIHRva2VuOiB0b2tlblxuICB9KSlcbmNvbnN0IGZpbHRlcldvcmRzQXJyYXkgPSAod29yZHM6IEFycmF5PHdvcmRUeXBlPikgPT5cbiAgd29yZHMuZmlsdGVyKHdvcmQgPT4gd29yZC50b2tlbi5sZW5ndGggIT09IDApXG5cbi8qXG4gKiBBIE1lZGl1bS1saWtlIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGltZSBsZWZ0IHJlYWRpbmdcbiAqL1xuY29uc3QgdGltZUxlZnRSZWFkaW5nID0gKHRleHQ6IHN0cmluZywgc3BlZWQ6IG51bWJlciA9IDEpID0+XG4gIGNvdW50V29yZHNJblRleHQodGV4dCkgLyAoREVGQVVMVF9XT1JEU19QRVJfTUlOVVRFICogc3BlZWQpXG5cbmNvbnN0IGNyZWF0ZVNwZWFrRXZlbnQgPSAoc2VudGVuY2U6IHdvcmRUeXBlKTogT2JqZWN0ID0+IHtcbiAgY29uc3QgdXR0ZXJUaGlzID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZShzZW50ZW5jZS50b2tlbilcbiAgdXR0ZXJUaGlzLmxhbmcgPSBzZW50ZW5jZS5sYW5nXG4gIHV0dGVyVGhpcy5yYXRlID0gMS45XG4gIHJldHVybiB1dHRlclRoaXNcbn1cblxuY29uc3QgY3JlYXRlU3BlYWtFdmVudHMgPSAocGFydHM6IEFycmF5PHdvcmRUeXBlPik6IEFycmF5PE9iamVjdD4gPT5cbiAgcGFydHMubWFwKGNyZWF0ZVNwZWFrRXZlbnQpXG5cbmNvbnN0IHRyYW5zZm9ybVNwZWFrRXZlbnRzSW50b0NhbGxiYWNrcyA9IChzcGVha0V2ZW50czogQXJyYXk8T2JqZWN0PikgPT5cbiAgc3BlYWtFdmVudHMubWFwKHNwZWFrRXZlbnQgPT4gKCkgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgLy8gc3BlYWtFdmVudC5vbkVuZCA9IHJlc29sdmUoKCkgPT4gKVxuICB9KSlcblxuY29uc3QgY29uY2F0U3BlYWtFdmVudHNTZW50ZW5jZXMgPVxuICAoc3BlYWtFdmVudHNTZW50ZW5jZXM6IEFycmF5PEFycmF5PE9iamVjdD4+KTogQXJyYXk8T2JqZWN0PiA9PlxuICAgIHNwZWFrRXZlbnRzU2VudGVuY2VzLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYiksIFtdKVxuXG5hcHAuc3BlYWtJdExvdWQgPSAoKSA9PiB7XG4gIGNvbnN0IHRleHQgPSBmb3JtYXRUZXh0KCRpbnB1dC5pbm5lclRleHQudHJpbSgpKVxuICBjb25zdCBzZW50ZW5jZXMgPSBzcGxpdFRleHRJbnRvU2VudGVuY2VzKHRleHQpXG4gIGNvbnNvbGUubG9nKHNlbnRlbmNlcylcblxuICBjb25zb2xlLmxvZygndGltZUxlZnRSZWFkaW5nJywgdGltZUxlZnRSZWFkaW5nKHRleHQsIGFwcC5zcGVha2VyLmN1cnJlbnRTcGVlZCkpXG5cbiAgYXBwLnNlbnRlbmNlcyA9IHNlbnRlbmNlc1xuXG4gIGNvbnN0IHRleHRUb2tlbnNBcnJheSA9IHNlbnRlbmNlcy5tYXAoc2VudGVuY2UgPT4gY29tcG9zZShcbiAgICBmaWx0ZXJXb3Jkc0FycmF5LFxuICAgIGNvbnZlcnRXb3Jkc0ludG9Ub2tlbnMsXG4gICAgc3BsaXRTZW50ZW5jZUludG9Xb3Jkc1xuICApKHNlbnRlbmNlKSlcblxuICAvLyBjb25zdCBsb2dBbmRDb250aW51ZSA9IChhcmdzKSA9PiB7IGNvbnNvbGUubG9nKGFyZ3MpOyByZXR1cm4gYXJncyB9XG4gIGNvbnN0IHNwZWFrRXZlbnRzU2VudGVuY2VzID0gdGV4dFRva2Vuc0FycmF5Lm1hcChcbiAgICAodGV4dFRva2VuczogQXJyYXk8d29yZFR5cGU+KTogQXJyYXk8QXJyYXk8T2JqZWN0Pj4gPT4gY29tcG9zZShcbiAgICAgIC8vIHRyYW5zZm9ybVNwZWFrRXZlbnRzSW50b1Byb21pc2VzLFxuICAgICAgY3JlYXRlU3BlYWtFdmVudHMsXG4gICAgICBqb2luT25lTGFuZ3VhZ2VXb3Jkc1xuICAgICkodGV4dFRva2VucykpXG5cbiAgY29uc3QgcHJvbWlzZXMgPSBbXVxuICBjb25jYXRTcGVha0V2ZW50c1NlbnRlbmNlcyhzcGVha0V2ZW50c1NlbnRlbmNlcykuZm9yRWFjaChwaHJhc2UgPT5cbiAgICBwcm9taXNlcy5wdXNoKCgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGFwcC5zcGVha2VyLnNwZWFrKHBocmFzZSlcbiAgICAgIGFwcC5jdXJyZW50VXR0ZXJhbmNlSW5kZXggPSBhcHAuY3VycmVudFV0dGVyYW5jZUluZGV4ICsgMVxuICAgICAgJGlucHV0LmlubmVySFRNTCA9ICRpbnB1dC5pbm5lclRleHQucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cChwaHJhc2UudGV4dCksXG4gICAgICAgIGA8bWFyaz4ke3BocmFzZS50ZXh0fTwvbWFyaz5gXG4gICAgICApXG5cbiAgICAgIGNvbnNvbGUubG9nKGFwcC5jdXJyZW50VXR0ZXJhbmNlSW5kZXgpXG4gICAgICBwaHJhc2Uub25lbmQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChhcHAuc3BlYWtlci5pc0NoYW5naW5nU3BlZWQpIHtcbiAgICAgICAgICBhcHAuc3BlYWtlci5pc0NoYW5naW5nU3BlZWQgPSBmYWxzZVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCdwaHJhc2UgZW5kZW5kJylcbiAgICAgICAgcmV0dXJuIHJlc29sdmUocGhyYXNlLnRleHQpXG4gICAgICB9XG4gICAgfSkpXG4gIClcblxuICBjb25zb2xlLnRpbWUoJ3JlYWQnKVxuICBzZXJpYWwocHJvbWlzZXMpLnRoZW4oKCkgPT4gY29uc29sZS50aW1lRW5kKCdyZWFkJykpXG59XG5cbiRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgY29uc29sZS5sb2coJ2NsaWNrZWQnKVxuICBhcHAubm9TbGVlcC5lbmFibGUoKVxuICBhcHAuc3BlYWtJdExvdWQoKVxufSlcblxuY29uc29sZS5sb2coYXBwLnNwZWFrZXIpXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZXZlbnQgPT4ge1xuICBjb25zb2xlLmxvZyhhcHAuc3BlYWtlci5zdG9wKCkpXG59KVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAvLyBJZiBzcGFjZSBpcyBwcmVzc2VkXG4gIGlmIChldmVudC5rZXlDb2RlID09PSAzMikge1xuICAgIGFwcC5zcGVha2VyLnBsYXlQYXVzZSgpXG4gIH1cbn0pXG5cbiRpbnB1dC5mb2N1cygpXG4kaW5jcmVtZW50U3BlZWRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gIGFwcC5zcGVha2VyLmluY3JlbWVudFNwZWVkKClcbn0pXG5cbiRkZWNyZW1lbnRTcGVlZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgYXBwLnNwZWFrZXIuZGVjcmVtZW50U3BlZWQoKVxufSlcblxuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgKGV2ZW50OiBFdmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgbGV0IHBhc3RlZFRleHQgPSAnJ1xuICBpZiAod2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkgeyAvLyBJRVxuICAgIHBhc3RlZFRleHQgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCdUZXh0JylcbiAgfSBlbHNlIGlmIChldmVudC5jbGlwYm9hcmREYXRhICYmIGV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkge1xuICAgIHBhc3RlZFRleHQgPSBldmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvaHRtbCcpXG4gIH1cblxuICBjb25zdCBoaWRkZW5JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGhpZGRlbklucHV0LmlubmVySFRNTCA9IHBhc3RlZFRleHRcblxuICBjb25zdCB0ZXh0ID0gaGlkZGVuSW5wdXQudGV4dENvbnRlbnRcblxuICAkaW5wdXQuaW5uZXJIVE1MID0gdGV4dFxuICBjb25zb2xlLmxvZyh0ZXh0KVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsImNvbnN0IG1lZGlhRmlsZSA9IHJlcXVpcmUoJy4vbWVkaWEuanMnKVxuXG4vLyBEZXRlY3QgaU9TIGJyb3dzZXJzIDwgdmVyc2lvbiAxMFxuY29uc3Qgb2xkSU9TID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFyc2VGbG9hdChcbiAgKCcnICsgKC9DUFUuKk9TIChbMC05X117Myw0fSlbMC05X117MCwxfXwoQ1BVIGxpa2UpLipBcHBsZVdlYktpdC4qTW9iaWxlL2kuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBbMCwgJyddKVsxXSlcbiAgICAucmVwbGFjZSgndW5kZWZpbmVkJywgJzNfMicpLnJlcGxhY2UoJ18nLCAnLicpLnJlcGxhY2UoJ18nLCAnJylcbikgPCAxMCAmJiAhd2luZG93Lk1TU3RyZWFtXG5cbmNsYXNzIE5vU2xlZXAge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgaWYgKG9sZElPUykge1xuICAgICAgdGhpcy5ub1NsZWVwVGltZXIgPSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldCB1cCBubyBzbGVlcCB2aWRlbyBlbGVtZW50XG4gICAgICB0aGlzLm5vU2xlZXBWaWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJylcblxuICAgICAgdGhpcy5ub1NsZWVwVmlkZW8uc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKVxuICAgICAgdGhpcy5ub1NsZWVwVmlkZW8uc2V0QXR0cmlidXRlKCdzcmMnLCBtZWRpYUZpbGUpXG5cbiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5ub1NsZWVwVmlkZW8uY3VycmVudFRpbWUgPiAwLjUpIHtcbiAgICAgICAgICB0aGlzLm5vU2xlZXBWaWRlby5jdXJyZW50VGltZSA9IE1hdGgucmFuZG9tKClcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIGVuYWJsZSAoKSB7XG4gICAgaWYgKG9sZElPUykge1xuICAgICAgdGhpcy5kaXNhYmxlKClcbiAgICAgIHRoaXMubm9TbGVlcFRpbWVyID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLydcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQod2luZG93LnN0b3AsIDApXG4gICAgICB9LCAxNTAwMClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub1NsZWVwVmlkZW8ucGxheSgpXG4gICAgfVxuICB9XG5cbiAgZGlzYWJsZSAoKSB7XG4gICAgaWYgKG9sZElPUykge1xuICAgICAgaWYgKHRoaXMubm9TbGVlcFRpbWVyKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubm9TbGVlcFRpbWVyKVxuICAgICAgICB0aGlzLm5vU2xlZXBUaW1lciA9IG51bGxcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub1NsZWVwVmlkZW8ucGF1c2UoKVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBOb1NsZWVwXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ub3NsZWVwLmpzL3NyYy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9ICdkYXRhOnZpZGVvL21wNDtiYXNlNjQsQUFBQUlHWjBlWEJ0Y0RReUFBQUNBR2x6YjIxcGMyOHlZWFpqTVcxd05ERUFBQUFJWm5KbFpRQUFDS0J0WkdGMEFBQUM4d1lGLy8vdjNFWHB2ZWJaU0xlV0xOZ2cyU1B1NzNneU5qUWdMU0JqYjNKbElERTBNaUJ5TWpRM09TQmtaRGM1WVRZeElDMGdTQzR5TmpRdlRWQkZSeTAwSUVGV1F5QmpiMlJsWXlBdElFTnZjSGxzWldaMElESXdNRE10TWpBeE5DQXRJR2gwZEhBNkx5OTNkM2N1ZG1sa1pXOXNZVzR1YjNKbkwzZ3lOalF1YUhSdGJDQXRJRzl3ZEdsdmJuTTZJR05oWW1GalBURWdjbVZtUFRFZ1pHVmliRzlqYXoweE9qQTZNQ0JoYm1Gc2VYTmxQVEI0TVRvd2VERXhNU0J0WlQxb1pYZ2djM1ZpYldVOU1pQndjM2s5TVNCd2MzbGZjbVE5TVM0d01Eb3dMakF3SUcxcGVHVmtYM0psWmowd0lHMWxYM0poYm1kbFBURTJJR05vY205dFlWOXRaVDB4SUhSeVpXeHNhWE05TUNBNGVEaGtZM1E5TUNCamNXMDlNQ0JrWldGa2VtOXVaVDB5TVN3eE1TQm1ZWE4wWDNCemEybHdQVEVnWTJoeWIyMWhYM0Z3WDI5bVpuTmxkRDB3SUhSb2NtVmhaSE05TmlCc2IyOXJZV2hsWVdSZmRHaHlaV0ZrY3oweElITnNhV05sWkY5MGFISmxZV1J6UFRBZ2JuSTlNQ0JrWldOcGJXRjBaVDB4SUdsdWRHVnliR0ZqWldROU1DQmliSFZ5WVhsZlkyOXRjR0YwUFRBZ1kyOXVjM1J5WVdsdVpXUmZhVzUwY21FOU1DQmlabkpoYldWelBUTWdZbDl3ZVhKaGJXbGtQVElnWWw5aFpHRndkRDB4SUdKZlltbGhjejB3SUdScGNtVmpkRDB4SUhkbGFXZG9kR0k5TVNCdmNHVnVYMmR2Y0Qwd0lIZGxhV2RvZEhBOU1TQnJaWGxwYm5ROU16QXdJR3RsZVdsdWRGOXRhVzQ5TXpBZ2MyTmxibVZqZFhROU5EQWdhVzUwY21GZmNtVm1jbVZ6YUQwd0lISmpYMnh2YjJ0aGFHVmhaRDB4TUNCeVl6MWpjbVlnYldKMGNtVmxQVEVnWTNKbVBUSXdMakFnY1dOdmJYQTlNQzQyTUNCeGNHMXBiajB3SUhGd2JXRjRQVFk1SUhGd2MzUmxjRDAwSUhaaWRsOXRZWGh5WVhSbFBUSXdNREF3SUhaaWRsOWlkV1p6YVhwbFBUSTFNREF3SUdOeVpsOXRZWGc5TUM0d0lHNWhiRjlvY21ROWJtOXVaU0JtYVd4c1pYSTlNQ0JwY0Y5eVlYUnBiejB4TGpRd0lHRnhQVEU2TVM0d01BQ0FBQUFBT1dXSWhBQTMvL3ArQzd2OHRERFNUamY5N3c1NWkzU2JSUE80WlkraGtqRDVoYmtBa0wzenBKNmgvTFIxQ0FBQnpnQjFrcXF6VW9ybGhRQUFBQXhCbWlRWWhuLytxWllBRExnQUFBQUpRWjVDUWhYL0FBajVJUUFEUUdnY0lRQURRR2djQUFBQUNRR2VZVVFuL3dBTEtDRUFBMEJvSEFBQUFBa0JubU5FSi84QUN5a2hBQU5BYUJ3aEFBTkFhQndBQUFBTlFacG9ORXhEUC82cGxnQU11U0VBQTBCb0hBQUFBQXRCbm9aRkVTd3Ivd0FJK1NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbnFWRUovOEFDeWtoQUFOQWFCd0FBQUFKQVo2blJDZi9BQXNvSVFBRFFHZ2NJUUFEUUdnY0FBQUFEVUdhckRSTVF6LytxWllBRExnaEFBTkFhQndBQUFBTFFaN0tSUlVzSy84QUNQa2hBQU5BYUJ3QUFBQUpBWjdwUkNmL0FBc29JUUFEUUdnY0lRQURRR2djQUFBQUNRR2U2MFFuL3dBTEtDRUFBMEJvSEFBQUFBMUJtdkEwVEVNLy9xbVdBQXk1SVFBRFFHZ2NJUUFEUUdnY0FBQUFDMEdmRGtVVkxDdi9BQWo1SVFBRFFHZ2NBQUFBQ1FHZkxVUW4vd0FMS1NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbnk5RUovOEFDeWdoQUFOQWFCd0FBQUFOUVpzME5FeERQLzZwbGdBTXVDRUFBMEJvSEFBQUFBdEJuMUpGRlN3ci93QUkrU0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JuM0ZFSi84QUN5Z2hBQU5BYUJ3QUFBQUpBWjl6UkNmL0FBc29JUUFEUUdnY0lRQURRR2djQUFBQURVR2JlRFJNUXovK3FaWUFETGtoQUFOQWFCd0FBQUFMUVorV1JSVXNLLzhBQ1BnaEFBTkFhQndoQUFOQWFCd0FBQUFKQVorMVJDZi9BQXNwSVFBRFFHZ2NBQUFBQ1FHZnQwUW4vd0FMS1NFQUEwQm9IQ0VBQTBCb0hBQUFBQTFCbTd3MFRFTS8vcW1XQUF5NElRQURRR2djQUFBQUMwR2Yya1VWTEN2L0FBajVJUUFEUUdnY0FBQUFDUUdmK1VRbi93QUxLQ0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JuL3RFSi84QUN5a2hBQU5BYUJ3QUFBQU5RWnZnTkV4RFAvNnBsZ0FNdVNFQUEwQm9IQ0VBQTBCb0hBQUFBQXRCbmg1RkZTd3Ivd0FJK0NFQUEwQm9IQUFBQUFrQm5qMUVKLzhBQ3lnaEFBTkFhQndoQUFOQWFCd0FBQUFKQVo0L1JDZi9BQXNwSVFBRFFHZ2NBQUFBRFVHYUpEUk1Rei8rcVpZQURMZ2hBQU5BYUJ3QUFBQUxRWjVDUlJVc0svOEFDUGtoQUFOQWFCd2hBQU5BYUJ3QUFBQUpBWjVoUkNmL0FBc29JUUFEUUdnY0FBQUFDUUdlWTBRbi93QUxLU0VBQTBCb0hDRUFBMEJvSEFBQUFBMUJtbWcwVEVNLy9xbVdBQXk1SVFBRFFHZ2NBQUFBQzBHZWhrVVZMQ3YvQUFqNUlRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZXBVUW4vd0FMS1NFQUEwQm9IQUFBQUFrQm5xZEVKLzhBQ3lnaEFBTkFhQndBQUFBTlFacXNORXhEUC82cGxnQU11Q0VBQTBCb0hDRUFBMEJvSEFBQUFBdEJuc3BGRlN3ci93QUkrU0VBQTBCb0hBQUFBQWtCbnVsRUovOEFDeWdoQUFOQWFCd2hBQU5BYUJ3QUFBQUpBWjdyUkNmL0FBc29JUUFEUUdnY0FBQUFEVUdhOERSTVF6LytxWllBRExraEFBTkFhQndoQUFOQWFCd0FBQUFMUVo4T1JSVXNLLzhBQ1BraEFBTkFhQndBQUFBSkFaOHRSQ2YvQUFzcElRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZkwwUW4vd0FMS0NFQUEwQm9IQUFBQUExQm16UTBURU0vL3FtV0FBeTRJUUFEUUdnY0FBQUFDMEdmVWtVVkxDdi9BQWo1SVFBRFFHZ2NJUUFEUUdnY0FBQUFDUUdmY1VRbi93QUxLQ0VBQTBCb0hBQUFBQWtCbjNORUovOEFDeWdoQUFOQWFCd2hBQU5BYUJ3QUFBQU5RWnQ0TkV4Qy8vNnBsZ0FNdVNFQUEwQm9IQUFBQUF0Qm41WkZGU3dyL3dBSStDRUFBMEJvSENFQUEwQm9IQUFBQUFrQm43VkVKLzhBQ3lraEFBTkFhQndBQUFBSkFaKzNSQ2YvQUFzcElRQURRR2djQUFBQURVR2J1elJNUW4vK25oQUFZc0FoQUFOQWFCd2hBQU5BYUJ3QUFBQUpRWi9hUWhQL0FBc3BJUUFEUUdnY0FBQUFDUUdmK1VRbi93QUxLQ0VBQTBCb0hDRUFBMEJvSENFQUEwQm9IQ0VBQTBCb0hDRUFBMEJvSENFQUEwQm9IQUFBQ2lGdGIyOTJBQUFBYkcxMmFHUUFBQUFBMVlDQ1g5V0FnbDhBQUFQb0FBQUgvQUFCQUFBQkFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURBQUFBR0dsdlpITUFBQUFBRUlDQWdBY0FULy8vL3Y3L0FBQUYrWFJ5WVdzQUFBQmNkR3RvWkFBQUFBUFZnSUpmMVlDQ1h3QUFBQUVBQUFBQUFBQUgwQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUF5Z0FBQU1vQUFBQUFBQ1JsWkhSekFBQUFIR1ZzYzNRQUFBQUFBQUFBQVFBQUI5QUFBQmR3QUFFQUFBQUFCWEZ0WkdsaEFBQUFJRzFrYUdRQUFBQUExWUNDWDlXQWdsOEFBVitRQUFLL0lGWEVBQUFBQUFBdGFHUnNjZ0FBQUFBQUFBQUFkbWxrWlFBQUFBQUFBQUFBQUFBQUFGWnBaR1Z2U0dGdVpHeGxjZ0FBQUFVY2JXbHVaZ0FBQUJSMmJXaGtBQUFBQVFBQUFBQUFBQUFBQUFBQUpHUnBibVlBQUFBY1pISmxaZ0FBQUFBQUFBQUJBQUFBREhWeWJDQUFBQUFCQUFBRTNITjBZbXdBQUFDWWMzUnpaQUFBQUFBQUFBQUJBQUFBaUdGMll6RUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXlnREtBRWdBQUFCSUFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZLy84QUFBQXlZWFpqUXdGTlFDai80UUFiWjAxQUtPeWhvM3lTVFVCQVFGQUFBQU1BRUFBcjhnRHhneGxnQVFBRWFPK0c4Z0FBQUJoemRIUnpBQUFBQUFBQUFBRUFBQUE4QUFBTHVBQUFBQlJ6ZEhOekFBQUFBQUFBQUFFQUFBQUJBQUFCOEdOMGRITUFBQUFBQUFBQVBBQUFBQUVBQUJkd0FBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQURxWUFBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFBRUFBQXU0QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBRHFZQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUFFQUFBdTRBQUFBQVFBQU9wZ0FBQUFCQUFBWGNBQUFBQUVBQUFBQUFBQUFBUUFBQzdnQUFBQUJBQUE2bUFBQUFBRUFBQmR3QUFBQUFRQUFBQUFBQUFBQkFBQUx1QUFBQUFFQUFEcVlBQUFBQVFBQUYzQUFBQUFCQUFBQUFBQUFBQUVBQUF1NEFBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQURxWUFBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFBRUFBQXU0QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBQzdnQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUJ4emRITmpBQUFBQUFBQUFBRUFBQUFCQUFBQUFRQUFBQUVBQUFFRWMzUnplZ0FBQUFBQUFBQUFBQUFBUEFBQUF6UUFBQUFRQUFBQURRQUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFQQUFBQURRQUFBQTBBQUFBUkFBQUFEd0FBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBUEFBQUFEUUFBQUEwQUFBQVJBQUFBRHdBQUFBMEFBQUFOQUFBQUVRQUFBQThBQUFBTkFBQUFEUUFBQUJFQUFBQVBBQUFBRFFBQUFBMEFBQUFSQUFBQUR3QUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFQQUFBQURRQUFBQTBBQUFBUkFBQUFEd0FBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBTkFBQUFEUUFBQVFCemRHTnZBQUFBQUFBQUFEd0FBQUF3QUFBRFpBQUFBM1FBQUFPTkFBQURvQUFBQTdrQUFBUFFBQUFENndBQUEvNEFBQVFYQUFBRUxnQUFCRU1BQUFSY0FBQUVid0FBQkl3QUFBU2hBQUFFdWdBQUJNMEFBQVRrQUFBRS93QUFCUklBQUFVckFBQUZRZ0FBQlYwQUFBVndBQUFGaVFBQUJhQUFBQVcxQUFBRnpnQUFCZUVBQUFYK0FBQUdFd0FBQml3QUFBWS9BQUFHVmdBQUJuRUFBQWFFQUFBR25RQUFCclFBQUFiUEFBQUc0Z0FBQnZVQUFBY1NBQUFISndBQUIwQUFBQWRUQUFBSGNBQUFCNFVBQUFlZUFBQUhzUUFBQjhnQUFBZmpBQUFIOWdBQUNBOEFBQWdtQUFBSVFRQUFDRlFBQUFobkFBQUloQUFBQ0pjQUFBTXNkSEpoYXdBQUFGeDBhMmhrQUFBQUE5V0FnbC9WZ0lKZkFBQUFBZ0FBQUFBQUFBZjhBQUFBQUFBQUFBQUFBQUFCQVFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUNzbTFrYVdFQUFBQWdiV1JvWkFBQUFBRFZnSUpmMVlDQ1h3QUFyRVFBQVdBQVZjUUFBQUFBQUNkb1pHeHlBQUFBQUFBQUFBQnpiM1Z1QUFBQUFBQUFBQUFBQUFBQVUzUmxjbVZ2QUFBQUFtTnRhVzVtQUFBQUVITnRhR1FBQUFBQUFBQUFBQUFBQUNSa2FXNW1BQUFBSEdSeVpXWUFBQUFBQUFBQUFRQUFBQXgxY213Z0FBQUFBUUFBQWlkemRHSnNBQUFBWjNOMGMyUUFBQUFBQUFBQUFRQUFBRmR0Y0RSaEFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQ0FCQUFBQUFBckVRQUFBQUFBRE5sYzJSekFBQUFBQU9BZ0lBaUFBSUFCSUNBZ0JSQUZRQUFBQUFERFVBQUFBQUFCWUNBZ0FJU0VBYUFnSUFCQWdBQUFCaHpkSFJ6QUFBQUFBQUFBQUVBQUFCWUFBQUVBQUFBQUJ4emRITmpBQUFBQUFBQUFBRUFBQUFCQUFBQUFRQUFBQUVBQUFBVWMzUnplZ0FBQUFBQUFBQUdBQUFBV0FBQUFYQnpkR052QUFBQUFBQUFBRmdBQUFPQkFBQURod0FBQTVvQUFBT3RBQUFEc3dBQUE4b0FBQVBmQUFBRDVRQUFBL2dBQUFRTEFBQUVFUUFBQkNnQUFBUTlBQUFFVUFBQUJGWUFBQVJwQUFBRWdBQUFCSVlBQUFTYkFBQUVyZ0FBQkxRQUFBVEhBQUFFM2dBQUJQTUFBQVQ1QUFBRkRBQUFCUjhBQUFVbEFBQUZQQUFBQlZFQUFBVlhBQUFGYWdBQUJYMEFBQVdEQUFBRm1nQUFCYThBQUFYQ0FBQUZ5QUFBQmRzQUFBWHlBQUFGK0FBQUJnMEFBQVlnQUFBR0pnQUFCamtBQUFaUUFBQUdaUUFBQm1zQUFBWitBQUFHa1FBQUJwY0FBQWF1QUFBR3d3QUFCc2tBQUFiY0FBQUc3d0FBQndZQUFBY01BQUFISVFBQUJ6UUFBQWM2QUFBSFRRQUFCMlFBQUFkcUFBQUhmd0FBQjVJQUFBZVlBQUFIcXdBQUI4SUFBQWZYQUFBSDNRQUFCL0FBQUFnREFBQUlDUUFBQ0NBQUFBZzFBQUFJT3dBQUNFNEFBQWhoQUFBSWVBQUFDSDRBQUFpUkFBQUlwQUFBQ0tvQUFBaXdBQUFJdGdBQUNMd0FBQWpDQUFBQUZuVmtkR0VBQUFBT2JtRnRaVk4wWlhKbGJ3QUFBSEIxWkhSaEFBQUFhRzFsZEdFQUFBQUFBQUFBSVdoa2JISUFBQUFBQUFBQUFHMWthWEpoY0hCc0FBQUFBQUFBQUFBQUFBQUFPMmxzYzNRQUFBQXpxWFJ2YndBQUFDdGtZWFJoQUFBQUFRQUFBQUJJWVc1a1FuSmhhMlVnTUM0eE1DNHlJREl3TVRVd05qRXhNREE9J1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbm9zbGVlcC5qcy9zcmMvbWVkaWEuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==