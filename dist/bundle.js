/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_nosleep_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_nosleep_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_nosleep_js__);


const $input = document.querySelector('#input-textarea');
const $button = document.querySelector('#button');

const $incrementSpeedButton = document.querySelector('#increment-speed');
const $decrementSpeedButton = document.querySelector('#decrement-speed');

const $progressBar = document.querySelector('#progress-bar');
const $progressPointer = document.querySelector('#progress-pointer');

const ALPHABET = {
  'ru-RU': {
    unicode: [1072, 1103]
  },
  'number': {
    unicode: [48, 57]
  }

  // when speaking speed is 1
};const DEFAULT_WORDS_PER_MINUTE = 117.6;
const MIN_SPEED = 0.52;

// fp composition & pipe helpers
const pipe = (fn, ...fns) => (...args) => fns.reduce((result, fn) => fn(result), fn(...args));
const compose = (...fns) => (...args) => pipe(...fns.reverse())(...args);

const concat = list => Array.prototype.concat.bind(list);
const promiseConcat = f => x => f().then(concat(x));
const promiseReduce = (acc, x) => acc.then(promiseConcat(x));
/*
 * serial executes Promises sequentially.
 * @param {funcs} An array of funcs that return promises.
 * @example
 * const urls = ['/url1', '/url2', '/url3']
 * serial(urls.map(url => () => $.ajax(url)))
 *     .then(console.log.bind(console))
 */
const serial = funcs => funcs.reduce(promiseReduce, Promise.resolve([]));

class Speaker {
  constructor() {
    this.synth = window.speechSynthesis;
    this.isSpeaking = false;
    this.isChangingSpeed = false;
    this.isStopped = false;
    this.currentSpeed = 1.1;
  }

  speak(utter) {
    if (!utter && !this.currentUtterance) return false;
    this.currentUtterance = utter || this.currentUtterance;
    this.currentUtterance.rate = this.currentSpeed;
    this.play();
    this.synth.speak(this.currentUtterance);
    this.isStopped = false;
    console.log(this.synth);
  }
  stop() {
    this.currentUtterance = null;
    this.synth.cancel();
    this.isStopped = true;
    return false;
  }

  setSpeed(value) {
    // this.currentUtterance.rate = value
    // this.speak()
  }
  play() {
    this.isStopped = true;
    this.synth.resume();
  }
  pause() {
    this.isStopped = false;
    this.synth.pause();
  }
  playPause() {
    this.isStopped = !this.isStopped;
    this.isStopped ? this.synth.pause() : this.synth.resume();
  }
  _changeSpeed(delta) {
    this.synth.cancel();
    this.currentSpeed = delta > 0 ? this.currentSpeed + delta : this.currentSpeed <= MIN_SPEED ? MIN_SPEED : this.currentSpeed + delta;
    this.isChangingSpeed = true;
    this.speak();
    console.log(this.currentSpeed);
  }
  incrementSpeed() {
    this._changeSpeed(0.1);
  }
  decrementSpeed() {
    this._changeSpeed(-0.1);
  }
}

const app = {
  version: '0.0.3',
  getVersion() {
    console.log(this.version);
  },
  reader: {
    tokensCount: 0,
    currentTokenIndex: 0,
    get currentProgress() {
      return this.currentTokenIndex / this.tokensCount;
    }
  },
  speaker: new Speaker(),
  noSleep: new __WEBPACK_IMPORTED_MODULE_0_nosleep_js___default.a(),
  dom: {
    updateProgressBar(progress) {
      $progressPointer.style.transform = `translate(${progress * $progressBar.clientWidth - 16}px, 0)`;
    },
    highlightCurrentSentence(text) {
      $input.innerHTML = $input.innerText.replace(new RegExp(text), `<mark>${text}</mark>`);
    }
  }
};
window.app = app;

/*
 * Analyses the first letter in the word
 * Now it can guess between cyrilic and latin letter only
 */
const detectLangByStr = str => {
  let currentCharIndex = 0;
  let maxCharIndex = 3;

  while (currentCharIndex <= maxCharIndex) {
    const charCode = str.toLowerCase().charCodeAt(currentCharIndex);
    for (let alphabet in ALPHABET) {
      if (charCode >= ALPHABET[alphabet].unicode[0] && charCode <= ALPHABET[alphabet].unicode[1]) {
        return alphabet;
      }
    }
    currentCharIndex++;
  }

  return 'en';
};

/*
 * If the words are in the same language, returns truw
 * If one of the words is number, returns true
 * Otherwise, returns false
 */

const isTheSameLanguage = (word1, word2) => word1.lang === word2.lang || [word1.lang, word2.lang].includes('number');

const joinOneLanguageWords = words => {
  const sentences = [];
  words.forEach(word => {
    if (sentences.length === 0) return sentences.push(word);
    const previousWord = sentences[sentences.length - 1];
    isTheSameLanguage(previousWord, word) ? sentences[sentences.length - 1].token = [sentences[sentences.length - 1].token, word.token].join(' ') : sentences.push(word);
  });
  return sentences;
};

const formatText = text => text.replace(/\â€“/g, '.');
const splitTextIntoSentences = text => text.split('.');
const splitSentenceIntoWords = sentence => sentence.split(' ');
const countWordsInText = text => splitSentenceIntoWords(text).length;
const convertWordsIntoTokens = words => words.map(token => ({
  lang: detectLangByStr(token),
  token: token
}));
const filterWordsArray = words => words.filter(word => word.token.length !== 0);

/*
 * A Medium-like function calculates time left reading
 */
const timeLeftReading = (text, speed = 1) => countWordsInText(text) / (DEFAULT_WORDS_PER_MINUTE * speed);

const createSpeakEvent = sentence => {
  const utterThis = new SpeechSynthesisUtterance(sentence.token);
  utterThis.lang = sentence.lang;
  utterThis.rate = 1.9;
  return utterThis;
};

const createSpeakEvents = parts => parts.map(createSpeakEvent);

const concatSpeakEventsSentences = speakEventsSentences => speakEventsSentences.reduce((a, b) => a.concat(b), []);

app.speakItLoud = () => {
  const text = formatText($input.innerText.trim());
  const sentences = splitTextIntoSentences(text);
  console.log(sentences);

  console.log('timeLeftReading', timeLeftReading(text, app.speaker.currentSpeed));

  const textTokensArray = sentences.map(sentence => compose(filterWordsArray, convertWordsIntoTokens, splitSentenceIntoWords)(sentence));

  // const logAndContinue = (args) => { console.log(args); return args }
  const speakEventsSentences = textTokensArray.map(textTokens => compose(createSpeakEvents, joinOneLanguageWords)(textTokens));

  const promises = [];
  const phrases = concatSpeakEventsSentences(speakEventsSentences);
  app.reader.tokensCount = phrases.length;
  phrases.forEach(phrase => promises.push(() => new Promise((resolve, reject) => {

    app.speaker.speak(phrase);
    app.reader.currentTokenIndex = app.reader.currentTokenIndex + 1;
    app.dom.updateProgressBar(app.reader.currentProgress);
    app.dom.highlightCurrentSentence(phrase.text);

    phrase.onend = () => {
      if (app.speaker.isChangingSpeed) {
        app.speaker.isChangingSpeed = false;
        return;
      }
      if (app.speaker.isStopped) {
        return false;
      }
      return resolve(phrase.text);
    };
  })));

  serial(promises).then(console.log);
};

$button.addEventListener('click', event => {
  console.log('clicked');
  app.noSleep.enable();
  app.speakItLoud();
});

console.log(app.speaker);
window.addEventListener('beforeunload', event => {
  console.log(app.speaker.stop());
});

document.addEventListener('keydown', event => {
  // If space is pressed
  if (event.keyCode === 32) {
    app.speaker.playPause();
  }
});

$input.focus();
$incrementSpeedButton.addEventListener('click', event => {
  app.speaker.incrementSpeed();
});

$decrementSpeedButton.addEventListener('click', event => {
  app.speaker.decrementSpeed();
});

$input.addEventListener('paste', event => {
  event.preventDefault();

  let pastedText = '';
  if (window.clipboardData && window.clipboardData.getData) {
    // IE
    pastedText = window.clipboardData.getData('Text');
  } else if (event.clipboardData && event.clipboardData.getData) {
    pastedText = event.clipboardData.getData('text/html');
  }

  const hiddenInput = document.createElement('div');
  hiddenInput.innerHTML = pastedText;

  const text = hiddenInput.textContent;

  $input.innerHTML = text;
  console.log(text);
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

const mediaFile = __webpack_require__(2)

// Detect iOS browsers < version 10
const oldIOS = typeof navigator !== 'undefined' && parseFloat(
  ('' + (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1])
    .replace('undefined', '3_2').replace('_', '.').replace('_', '')
) < 10 && !window.MSStream

class NoSleep {
  constructor () {
    if (oldIOS) {
      this.noSleepTimer = null
    } else {
      // Set up no sleep video element
      this.noSleepVideo = document.createElement('video')

      this.noSleepVideo.setAttribute('playsinline', '')
      this.noSleepVideo.setAttribute('src', mediaFile)

      this.noSleepVideo.addEventListener('timeupdate', function (e) {
        if (this.noSleepVideo.currentTime > 0.5) {
          this.noSleepVideo.currentTime = Math.random()
        }
      }.bind(this))
    }
  }

  enable () {
    if (oldIOS) {
      this.disable()
      this.noSleepTimer = window.setInterval(function () {
        window.location.href = '/'
        window.setTimeout(window.stop, 0)
      }, 15000)
    } else {
      this.noSleepVideo.play()
    }
  }

  disable () {
    if (oldIOS) {
      if (this.noSleepTimer) {
        window.clearInterval(this.noSleepTimer)
        this.noSleepTimer = null
      }
    } else {
      this.noSleepVideo.pause()
    }
  }
};

module.exports = NoSleep


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = 'data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACKBtZGF0AAAC8wYF///v3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE0MiByMjQ3OSBkZDc5YTYxIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTEgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9MiBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0wIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MCA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0wIHRocmVhZHM9NiBsb29rYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFjZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJhbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdlaWdodHA9MSBrZXlpbnQ9MzAwIGtleWludF9taW49MzAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD0xMCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIwLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IHZidl9tYXhyYXRlPTIwMDAwIHZidl9idWZzaXplPTI1MDAwIGNyZl9tYXg9MC4wIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAOWWIhAA3//p+C7v8tDDSTjf97w55i3SbRPO4ZY+hkjD5hbkAkL3zpJ6h/LR1CAABzgB1kqqzUorlhQAAAAxBmiQYhn/+qZYADLgAAAAJQZ5CQhX/AAj5IQAD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'


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZTQyYTliNTY3ZmY1Y2Y0Mzc5YWIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3NsZWVwLmpzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9zbGVlcC5qcy9zcmMvbWVkaWEuanMiXSwibmFtZXMiOlsiJGlucHV0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiJGJ1dHRvbiIsIiRpbmNyZW1lbnRTcGVlZEJ1dHRvbiIsIiRkZWNyZW1lbnRTcGVlZEJ1dHRvbiIsIiRwcm9ncmVzc0JhciIsIiRwcm9ncmVzc1BvaW50ZXIiLCJBTFBIQUJFVCIsInVuaWNvZGUiLCJERUZBVUxUX1dPUkRTX1BFUl9NSU5VVEUiLCJNSU5fU1BFRUQiLCJwaXBlIiwiZm4iLCJmbnMiLCJhcmdzIiwicmVkdWNlIiwicmVzdWx0IiwiY29tcG9zZSIsInJldmVyc2UiLCJjb25jYXQiLCJsaXN0IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJiaW5kIiwicHJvbWlzZUNvbmNhdCIsImYiLCJ4IiwidGhlbiIsInByb21pc2VSZWR1Y2UiLCJhY2MiLCJzZXJpYWwiLCJmdW5jcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiU3BlYWtlciIsInN5bnRoIiwid2luZG93Iiwic3BlZWNoU3ludGhlc2lzIiwiaXNTcGVha2luZyIsImlzQ2hhbmdpbmdTcGVlZCIsImlzU3RvcHBlZCIsImN1cnJlbnRTcGVlZCIsInNwZWFrIiwidXR0ZXIiLCJjdXJyZW50VXR0ZXJhbmNlIiwicmF0ZSIsInBsYXkiLCJjb25zb2xlIiwibG9nIiwic3RvcCIsImNhbmNlbCIsInNldFNwZWVkIiwidmFsdWUiLCJyZXN1bWUiLCJwYXVzZSIsInBsYXlQYXVzZSIsIl9jaGFuZ2VTcGVlZCIsImRlbHRhIiwiaW5jcmVtZW50U3BlZWQiLCJkZWNyZW1lbnRTcGVlZCIsImFwcCIsInZlcnNpb24iLCJnZXRWZXJzaW9uIiwicmVhZGVyIiwidG9rZW5zQ291bnQiLCJjdXJyZW50VG9rZW5JbmRleCIsImN1cnJlbnRQcm9ncmVzcyIsInNwZWFrZXIiLCJub1NsZWVwIiwiZG9tIiwidXBkYXRlUHJvZ3Jlc3NCYXIiLCJwcm9ncmVzcyIsInN0eWxlIiwidHJhbnNmb3JtIiwiY2xpZW50V2lkdGgiLCJoaWdobGlnaHRDdXJyZW50U2VudGVuY2UiLCJ0ZXh0IiwiaW5uZXJIVE1MIiwiaW5uZXJUZXh0IiwicmVwbGFjZSIsIlJlZ0V4cCIsImRldGVjdExhbmdCeVN0ciIsInN0ciIsImN1cnJlbnRDaGFySW5kZXgiLCJtYXhDaGFySW5kZXgiLCJjaGFyQ29kZSIsInRvTG93ZXJDYXNlIiwiY2hhckNvZGVBdCIsImFscGhhYmV0IiwiaXNUaGVTYW1lTGFuZ3VhZ2UiLCJ3b3JkMSIsIndvcmQyIiwibGFuZyIsImluY2x1ZGVzIiwiam9pbk9uZUxhbmd1YWdlV29yZHMiLCJ3b3JkcyIsInNlbnRlbmNlcyIsImZvckVhY2giLCJ3b3JkIiwibGVuZ3RoIiwicHVzaCIsInByZXZpb3VzV29yZCIsInRva2VuIiwiam9pbiIsImZvcm1hdFRleHQiLCJzcGxpdFRleHRJbnRvU2VudGVuY2VzIiwic3BsaXQiLCJzcGxpdFNlbnRlbmNlSW50b1dvcmRzIiwic2VudGVuY2UiLCJjb3VudFdvcmRzSW5UZXh0IiwiY29udmVydFdvcmRzSW50b1Rva2VucyIsIm1hcCIsImZpbHRlcldvcmRzQXJyYXkiLCJmaWx0ZXIiLCJ0aW1lTGVmdFJlYWRpbmciLCJzcGVlZCIsImNyZWF0ZVNwZWFrRXZlbnQiLCJ1dHRlclRoaXMiLCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJjcmVhdGVTcGVha0V2ZW50cyIsInBhcnRzIiwiY29uY2F0U3BlYWtFdmVudHNTZW50ZW5jZXMiLCJzcGVha0V2ZW50c1NlbnRlbmNlcyIsImEiLCJiIiwic3BlYWtJdExvdWQiLCJ0cmltIiwidGV4dFRva2Vuc0FycmF5IiwidGV4dFRva2VucyIsInByb21pc2VzIiwicGhyYXNlcyIsInBocmFzZSIsInJlamVjdCIsIm9uZW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZW5hYmxlIiwia2V5Q29kZSIsImZvY3VzIiwicHJldmVudERlZmF1bHQiLCJwYXN0ZWRUZXh0IiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJoaWRkZW5JbnB1dCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQzVEQTs7QUFFQSxNQUFNQSxTQUFTQyxTQUFTQyxhQUFULENBQXVCLGlCQUF2QixDQUFmO0FBQ0EsTUFBTUMsVUFBVUYsU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFoQjs7QUFFQSxNQUFNRSx3QkFBd0JILFNBQVNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQTlCO0FBQ0EsTUFBTUcsd0JBQXdCSixTQUFTQyxhQUFULENBQXVCLGtCQUF2QixDQUE5Qjs7QUFFQSxNQUFNSSxlQUFlTCxTQUFTQyxhQUFULENBQXVCLGVBQXZCLENBQXJCO0FBQ0EsTUFBTUssbUJBQW1CTixTQUFTQyxhQUFULENBQXVCLG1CQUF2QixDQUF6Qjs7QUFFQSxNQUFNTSxXQUFXO0FBQ2YsV0FBUztBQUNQQyxhQUFTLENBQUMsSUFBRCxFQUFPLElBQVA7QUFERixHQURNO0FB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TztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDbkRBLGlDQUFpQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBlNDJhOWI1NjdmZjVjZjQzNzlhYiIsIi8vIEBmbG93XG5pbXBvcnQgTm9TbGVlcCBmcm9tICdub3NsZWVwLmpzJ1xuXG5jb25zdCAkaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXQtdGV4dGFyZWEnKVxuY29uc3QgJGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidXR0b24nKVxuXG5jb25zdCAkaW5jcmVtZW50U3BlZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5jcmVtZW50LXNwZWVkJylcbmNvbnN0ICRkZWNyZW1lbnRTcGVlZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkZWNyZW1lbnQtc3BlZWQnKVxuXG5jb25zdCAkcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvZ3Jlc3MtYmFyJylcbmNvbnN0ICRwcm9ncmVzc1BvaW50ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvZ3Jlc3MtcG9pbnRlcicpXG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICAncnUtUlUnOiB7XG4gICAgdW5pY29kZTogWzEwNzIsIDExMDNdXG4gIH0sXG4gICdudW1iZXInOiB7XG4gICAgdW5pY29kZTogWzQ4LCA1N11cbiAgfVxufVxuXG4vLyB3aGVuIHNwZWFraW5nIHNwZWVkIGlzIDFcbmNvbnN0IERFRkFVTFRfV09SRFNfUEVSX01JTlVURSA9IDExNy42XG5jb25zdCBNSU5fU1BFRUQgPSAwLjUyXG5cbi8vIGZwIGNvbXBvc2l0aW9uICYgcGlwZSBoZWxwZXJzXG5jb25zdCBwaXBlID0gKGZuLCAuLi5mbnMpID0+ICguLi5hcmdzKSA9PiBmbnMucmVkdWNlKChyZXN1bHQsIGZuKSA9PiBmbihyZXN1bHQpLCBmbiguLi5hcmdzKSlcbmNvbnN0IGNvbXBvc2UgPSAoLi4uZm5zKSA9PiAoLi4uYXJncykgPT4gcGlwZSguLi5mbnMucmV2ZXJzZSgpKSguLi5hcmdzKVxuXG5jb25zdCBjb25jYXQgPSBsaXN0ID0+IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYmluZChsaXN0KVxuY29uc3QgcHJvbWlzZUNvbmNhdCA9IGYgPT4geCA9PiBmKCkudGhlbihjb25jYXQoeCkpXG5jb25zdCBwcm9taXNlUmVkdWNlID0gKGFjYywgeCkgPT4gYWNjLnRoZW4ocHJvbWlzZUNvbmNhdCh4KSlcbi8qXG4gKiBzZXJpYWwgZXhlY3V0ZXMgUHJvbWlzZXMgc2VxdWVudGlhbGx5LlxuICogQHBhcmFtIHtmdW5jc30gQW4gYXJyYXkgb2YgZnVuY3MgdGhhdCByZXR1cm4gcHJvbWlzZXMuXG4gKiBAZXhhbXBsZVxuICogY29uc3QgdXJscyA9IFsnL3VybDEnLCAnL3VybDInLCAnL3VybDMnXVxuICogc2VyaWFsKHVybHMubWFwKHVybCA9PiAoKSA9PiAkLmFqYXgodXJsKSkpXG4gKiAgICAgLnRoZW4oY29uc29sZS5sb2cuYmluZChjb25zb2xlKSlcbiAqL1xuY29uc3Qgc2VyaWFsID0gZnVuY3MgPT4gZnVuY3MucmVkdWNlKHByb21pc2VSZWR1Y2UsIFByb21pc2UucmVzb2x2ZShbXSkpXG5cbmNsYXNzIFNwZWFrZXIge1xuICBzeW50aCA9IHdpbmRvdy5zcGVlY2hTeW50aGVzaXNcbiAgY3VycmVudFV0dGVyYW5jZTogT2JqZWN0XG4gIGlzU3BlYWtpbmc6IGJvb2xlYW4gPSBmYWxzZVxuICBpc0NoYW5naW5nU3BlZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICBpc1N0b3BwZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICBjdXJyZW50U3BlZWQ6IG51bWJlciA9IDEuMVxuXG4gIHNwZWFrICh1dHRlcikge1xuICAgIGlmICghdXR0ZXIgJiYgIXRoaXMuY3VycmVudFV0dGVyYW5jZSkgcmV0dXJuIGZhbHNlXG4gICAgdGhpcy5jdXJyZW50VXR0ZXJhbmNlID0gdXR0ZXIgfHwgdGhpcy5jdXJyZW50VXR0ZXJhbmNlXG4gICAgdGhpcy5jdXJyZW50VXR0ZXJhbmNlLnJhdGUgPSB0aGlzLmN1cnJlbnRTcGVlZFxuICAgIHRoaXMucGxheSgpXG4gICAgdGhpcy5zeW50aC5zcGVhayh0aGlzLmN1cnJlbnRVdHRlcmFuY2UpXG4gICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZVxuICAgIGNvbnNvbGUubG9nKHRoaXMuc3ludGgpXG4gIH1cbiAgc3RvcCAoKSB7XG4gICAgdGhpcy5jdXJyZW50VXR0ZXJhbmNlID0gbnVsbFxuICAgIHRoaXMuc3ludGguY2FuY2VsKClcbiAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHNldFNwZWVkICh2YWx1ZTogbnVtYmVyKSB7XG4gICAgLy8gdGhpcy5jdXJyZW50VXR0ZXJhbmNlLnJhdGUgPSB2YWx1ZVxuICAgIC8vIHRoaXMuc3BlYWsoKVxuICB9XG4gIHBsYXkoKSB7XG4gICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlXG4gICAgdGhpcy5zeW50aC5yZXN1bWUoKVxuICB9XG4gIHBhdXNlKCkge1xuICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2VcbiAgICB0aGlzLnN5bnRoLnBhdXNlKClcbiAgfVxuICBwbGF5UGF1c2UoKSB7XG4gICAgdGhpcy5pc1N0b3BwZWQgPSAhdGhpcy5pc1N0b3BwZWRcbiAgICB0aGlzLmlzU3RvcHBlZCA/IHRoaXMuc3ludGgucGF1c2UoKSA6IHRoaXMuc3ludGgucmVzdW1lKClcbiAgfVxuICBfY2hhbmdlU3BlZWQoZGVsdGE6IG51bWJlcikge1xuICAgIHRoaXMuc3ludGguY2FuY2VsKClcbiAgICB0aGlzLmN1cnJlbnRTcGVlZCA9IGRlbHRhID4gMFxuICAgICAgPyB0aGlzLmN1cnJlbnRTcGVlZCArIGRlbHRhXG4gICAgICA6IHRoaXMuY3VycmVudFNwZWVkIDw9IE1JTl9TUEVFRCA/IE1JTl9TUEVFRCA6IHRoaXMuY3VycmVudFNwZWVkICsgZGVsdGFcbiAgICB0aGlzLmlzQ2hhbmdpbmdTcGVlZCA9IHRydWVcbiAgICB0aGlzLnNwZWFrKClcbiAgICBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbnRTcGVlZClcbiAgfVxuICBpbmNyZW1lbnRTcGVlZCgpIHsgdGhpcy5fY2hhbmdlU3BlZWQoMC4xKSB9XG4gIGRlY3JlbWVudFNwZWVkKCkgeyB0aGlzLl9jaGFuZ2VTcGVlZCgtMC4xKSB9XG59XG5cbmNvbnN0IGFwcCA9IHtcbiAgdmVyc2lvbjogJzAuMC4zJyxcbiAgZ2V0VmVyc2lvbiAoKSB7XG4gICAgY29uc29sZS5sb2codGhpcy52ZXJzaW9uKVxuICB9LFxuICByZWFkZXI6IHtcbiAgICB0b2tlbnNDb3VudDogMCxcbiAgICBjdXJyZW50VG9rZW5JbmRleDogMCxcbiAgICBnZXQgY3VycmVudFByb2dyZXNzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRva2VuSW5kZXggLyB0aGlzLnRva2Vuc0NvdW50XG4gICAgfVxuICB9LFxuICBzcGVha2VyOiBuZXcgU3BlYWtlcigpLFxuICBub1NsZWVwOiBuZXcgTm9TbGVlcCgpLFxuICBkb206IHtcbiAgICB1cGRhdGVQcm9ncmVzc0Jhcihwcm9ncmVzczogbnVtYmVyKSB7XG4gICAgICAkcHJvZ3Jlc3NQb2ludGVyLnN0eWxlLnRyYW5zZm9ybSA9XG4gICAgICAgIGB0cmFuc2xhdGUoJHtwcm9ncmVzcyAqICRwcm9ncmVzc0Jhci5jbGllbnRXaWR0aCAtIDE2fXB4LCAwKWBcbiAgICB9LFxuICAgIGhpZ2hsaWdodEN1cnJlbnRTZW50ZW5jZSh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICRpbnB1dC5pbm5lckhUTUwgPSAkaW5wdXQuaW5uZXJUZXh0LnJlcGxhY2UoXG4gICAgICAgIG5ldyBSZWdFeHAodGV4dCksXG4gICAgICAgIGA8bWFyaz4ke3RleHR9PC9tYXJrPmBcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cbndpbmRvdy5hcHAgPSBhcHBcblxuLypcbiAqIEFuYWx5c2VzIHRoZSBmaXJzdCBsZXR0ZXIgaW4gdGhlIHdvcmRcbiAqIE5vdyBpdCBjYW4gZ3Vlc3MgYmV0d2VlbiBjeXJpbGljIGFuZCBsYXRpbiBsZXR0ZXIgb25seVxuICovXG5jb25zdCBkZXRlY3RMYW5nQnlTdHIgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgbGV0IGN1cnJlbnRDaGFySW5kZXggPSAwXG4gIGxldCBtYXhDaGFySW5kZXggPSAzXG5cbiAgd2hpbGUgKGN1cnJlbnRDaGFySW5kZXggPD0gbWF4Q2hhckluZGV4KSB7XG4gICAgY29uc3QgY2hhckNvZGUgPSBzdHIudG9Mb3dlckNhc2UoKS5jaGFyQ29kZUF0KGN1cnJlbnRDaGFySW5kZXgpXG4gICAgZm9yIChsZXQgYWxwaGFiZXQgaW4gQUxQSEFCRVQpIHtcbiAgICAgIGlmIChjaGFyQ29kZSA+PSBBTFBIQUJFVFthbHBoYWJldF0udW5pY29kZVswXSAmJlxuICAgICAgICAgIGNoYXJDb2RlIDw9IEFMUEhBQkVUW2FscGhhYmV0XS51bmljb2RlWzFdKSB7XG4gICAgICAgIHJldHVybiBhbHBoYWJldFxuICAgICAgfVxuICAgIH1cbiAgICBjdXJyZW50Q2hhckluZGV4KytcbiAgfVxuXG4gIHJldHVybiAnZW4nXG59XG5cbi8qXG4gKiBJZiB0aGUgd29yZHMgYXJlIGluIHRoZSBzYW1lIGxhbmd1YWdlLCByZXR1cm5zIHRydXdcbiAqIElmIG9uZSBvZiB0aGUgd29yZHMgaXMgbnVtYmVyLCByZXR1cm5zIHRydWVcbiAqIE90aGVyd2lzZSwgcmV0dXJucyBmYWxzZVxuICovXG50eXBlIHdvcmRUeXBlID0ge1xuICBsYW5nOiBzdHJpbmcsXG4gIHRva2VuOiBzdHJpbmdcbn1cbmNvbnN0IGlzVGhlU2FtZUxhbmd1YWdlID0gKFxuICB3b3JkMTogd29yZFR5cGUsXG4gIHdvcmQyOiB3b3JkVHlwZVxuKSA9PiB3b3JkMS5sYW5nID09PSB3b3JkMi5sYW5nIHx8XG4gIFt3b3JkMS5sYW5nLCB3b3JkMi5sYW5nXS5pbmNsdWRlcygnbnVtYmVyJylcblxuY29uc3Qgam9pbk9uZUxhbmd1YWdlV29yZHMgPSAod29yZHM6IEFycmF5PHdvcmRUeXBlPik6IEFycmF5PHdvcmRUeXBlPiA9PiB7XG4gIGNvbnN0IHNlbnRlbmNlcyA9IFtdXG4gIHdvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgaWYgKHNlbnRlbmNlcy5sZW5ndGggPT09IDApIHJldHVybiBzZW50ZW5jZXMucHVzaCh3b3JkKVxuICAgIGNvbnN0IHByZXZpb3VzV29yZCA9IHNlbnRlbmNlc1tzZW50ZW5jZXMubGVuZ3RoIC0gMV1cbiAgICBpc1RoZVNhbWVMYW5ndWFnZShwcmV2aW91c1dvcmQsIHdvcmQpXG4gICAgICA/IHNlbnRlbmNlc1tzZW50ZW5jZXMubGVuZ3RoIC0gMV0udG9rZW4gPVxuICAgICAgICAgIFtzZW50ZW5jZXNbc2VudGVuY2VzLmxlbmd0aCAtIDFdLnRva2VuLCB3b3JkLnRva2VuXS5qb2luKCcgJylcbiAgICAgIDogc2VudGVuY2VzLnB1c2god29yZClcbiAgfSlcbiAgcmV0dXJuIHNlbnRlbmNlc1xufVxuXG5jb25zdCBmb3JtYXRUZXh0ID0gKHRleHQ6IHN0cmluZykgPT4gdGV4dC5yZXBsYWNlKC9cXOKAky9nLCAnLicpXG5jb25zdCBzcGxpdFRleHRJbnRvU2VudGVuY2VzID0gKHRleHQ6IHN0cmluZyk6IEFycmF5PHN0cmluZz4gPT4gdGV4dC5zcGxpdCgnLicpXG5jb25zdCBzcGxpdFNlbnRlbmNlSW50b1dvcmRzID0gKHNlbnRlbmNlOiBzdHJpbmcpOiBBcnJheTxzdHJpbmc+ID0+IHNlbnRlbmNlLnNwbGl0KCcgJylcbmNvbnN0IGNvdW50V29yZHNJblRleHQgPSAodGV4dDogc3RyaW5nKSA9PiBzcGxpdFNlbnRlbmNlSW50b1dvcmRzKHRleHQpLmxlbmd0aFxuY29uc3QgY29udmVydFdvcmRzSW50b1Rva2VucyA9ICh3b3JkczogQXJyYXk8c3RyaW5nPik6IEFycmF5PHdvcmRUeXBlPiA9PlxuICB3b3Jkcy5tYXAoKHRva2VuOiBzdHJpbmcpID0+ICh7XG4gICAgbGFuZzogZGV0ZWN0TGFuZ0J5U3RyKHRva2VuKSxcbiAgICB0b2tlbjogdG9rZW5cbiAgfSkpXG5jb25zdCBmaWx0ZXJXb3Jkc0FycmF5ID0gKHdvcmRzOiBBcnJheTx3b3JkVHlwZT4pID0+XG4gIHdvcmRzLmZpbHRlcih3b3JkID0+IHdvcmQudG9rZW4ubGVuZ3RoICE9PSAwKVxuXG4vKlxuICogQSBNZWRpdW0tbGlrZSBmdW5jdGlvbiBjYWxjdWxhdGVzIHRpbWUgbGVmdCByZWFkaW5nXG4gKi9cbmNvbnN0IHRpbWVMZWZ0UmVhZGluZyA9ICh0ZXh0OiBzdHJpbmcsIHNwZWVkOiBudW1iZXIgPSAxKSA9PlxuICBjb3VudFdvcmRzSW5UZXh0KHRleHQpIC8gKERFRkFVTFRfV09SRFNfUEVSX01JTlVURSAqIHNwZWVkKVxuXG5jb25zdCBjcmVhdGVTcGVha0V2ZW50ID0gKHNlbnRlbmNlOiB3b3JkVHlwZSk6IE9iamVjdCA9PiB7XG4gIGNvbnN0IHV0dGVyVGhpcyA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2Uoc2VudGVuY2UudG9rZW4pXG4gIHV0dGVyVGhpcy5sYW5nID0gc2VudGVuY2UubGFuZ1xuICB1dHRlclRoaXMucmF0ZSA9IDEuOVxuICByZXR1cm4gdXR0ZXJUaGlzXG59XG5cbmNvbnN0IGNyZWF0ZVNwZWFrRXZlbnRzID0gKHBhcnRzOiBBcnJheTx3b3JkVHlwZT4pOiBBcnJheTxPYmplY3Q+ID0+XG4gIHBhcnRzLm1hcChjcmVhdGVTcGVha0V2ZW50KVxuXG5jb25zdCBjb25jYXRTcGVha0V2ZW50c1NlbnRlbmNlcyA9XG4gIChzcGVha0V2ZW50c1NlbnRlbmNlczogQXJyYXk8QXJyYXk8T2JqZWN0Pj4pOiBBcnJheTxPYmplY3Q+ID0+XG4gICAgc3BlYWtFdmVudHNTZW50ZW5jZXMucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSwgW10pXG5cbmFwcC5zcGVha0l0TG91ZCA9ICgpID0+IHtcbiAgY29uc3QgdGV4dCA9IGZvcm1hdFRleHQoJGlucHV0LmlubmVyVGV4dC50cmltKCkpXG4gIGNvbnN0IHNlbnRlbmNlcyA9IHNwbGl0VGV4dEludG9TZW50ZW5jZXModGV4dClcbiAgY29uc29sZS5sb2coc2VudGVuY2VzKVxuXG4gIGNvbnNvbGUubG9nKCd0aW1lTGVmdFJlYWRpbmcnLCB0aW1lTGVmdFJlYWRpbmcodGV4dCwgYXBwLnNwZWFrZXIuY3VycmVudFNwZWVkKSlcblxuICBjb25zdCB0ZXh0VG9rZW5zQXJyYXkgPSBzZW50ZW5jZXMubWFwKHNlbnRlbmNlID0+IGNvbXBvc2UoXG4gICAgZmlsdGVyV29yZHNBcnJheSxcbiAgICBjb252ZXJ0V29yZHNJbnRvVG9rZW5zLFxuICAgIHNwbGl0U2VudGVuY2VJbnRvV29yZHNcbiAgKShzZW50ZW5jZSkpXG5cbiAgLy8gY29uc3QgbG9nQW5kQ29udGludWUgPSAoYXJncykgPT4geyBjb25zb2xlLmxvZyhhcmdzKTsgcmV0dXJuIGFyZ3MgfVxuICBjb25zdCBzcGVha0V2ZW50c1NlbnRlbmNlcyA9IHRleHRUb2tlbnNBcnJheS5tYXAoXG4gICAgKHRleHRUb2tlbnM6IEFycmF5PHdvcmRUeXBlPik6IEFycmF5PEFycmF5PE9iamVjdD4+ID0+IGNvbXBvc2UoXG4gICAgICBjcmVhdGVTcGVha0V2ZW50cyxcbiAgICAgIGpvaW5PbmVMYW5ndWFnZVdvcmRzXG4gICAgKSh0ZXh0VG9rZW5zKSlcblxuICBjb25zdCBwcm9taXNlcyA9IFtdXG4gIGNvbnN0IHBocmFzZXMgPSBjb25jYXRTcGVha0V2ZW50c1NlbnRlbmNlcyhzcGVha0V2ZW50c1NlbnRlbmNlcylcbiAgYXBwLnJlYWRlci50b2tlbnNDb3VudCA9IHBocmFzZXMubGVuZ3RoXG4gIHBocmFzZXMuZm9yRWFjaChwaHJhc2UgPT5cbiAgICBwcm9taXNlcy5wdXNoKCgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgYXBwLnNwZWFrZXIuc3BlYWsocGhyYXNlKVxuICAgICAgYXBwLnJlYWRlci5jdXJyZW50VG9rZW5JbmRleCA9IGFwcC5yZWFkZXIuY3VycmVudFRva2VuSW5kZXggKyAxXG4gICAgICBhcHAuZG9tLnVwZGF0ZVByb2dyZXNzQmFyKGFwcC5yZWFkZXIuY3VycmVudFByb2dyZXNzKVxuICAgICAgYXBwLmRvbS5oaWdobGlnaHRDdXJyZW50U2VudGVuY2UocGhyYXNlLnRleHQpXG5cbiAgICAgIHBocmFzZS5vbmVuZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGFwcC5zcGVha2VyLmlzQ2hhbmdpbmdTcGVlZCkge1xuICAgICAgICAgIGFwcC5zcGVha2VyLmlzQ2hhbmdpbmdTcGVlZCA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwcC5zcGVha2VyLmlzU3RvcHBlZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlKHBocmFzZS50ZXh0KVxuICAgICAgfVxuICAgIH0pKVxuICApXG5cbiAgc2VyaWFsKHByb21pc2VzKS50aGVuKGNvbnNvbGUubG9nKVxufVxuXG4kYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdjbGlja2VkJylcbiAgYXBwLm5vU2xlZXAuZW5hYmxlKClcbiAgYXBwLnNwZWFrSXRMb3VkKClcbn0pXG5cbmNvbnNvbGUubG9nKGFwcC5zcGVha2VyKVxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGV2ZW50ID0+IHtcbiAgY29uc29sZS5sb2coYXBwLnNwZWFrZXIuc3RvcCgpKVxufSlcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudDogRXZlbnQpID0+IHtcbiAgLy8gSWYgc3BhY2UgaXMgcHJlc3NlZFxuICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzIpIHtcbiAgICBhcHAuc3BlYWtlci5wbGF5UGF1c2UoKVxuICB9XG59KVxuXG4kaW5wdXQuZm9jdXMoKVxuJGluY3JlbWVudFNwZWVkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICBhcHAuc3BlYWtlci5pbmNyZW1lbnRTcGVlZCgpXG59KVxuXG4kZGVjcmVtZW50U3BlZWRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gIGFwcC5zcGVha2VyLmRlY3JlbWVudFNwZWVkKClcbn0pXG5cbiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIChldmVudDogRXZlbnQpID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gIGxldCBwYXN0ZWRUZXh0ID0gJydcbiAgaWYgKHdpbmRvdy5jbGlwYm9hcmREYXRhICYmIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEpIHsgLy8gSUVcbiAgICBwYXN0ZWRUZXh0ID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgnVGV4dCcpXG4gIH0gZWxzZSBpZiAoZXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBldmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcbiAgICBwYXN0ZWRUZXh0ID0gZXZlbnQuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0L2h0bWwnKVxuICB9XG5cbiAgY29uc3QgaGlkZGVuSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBoaWRkZW5JbnB1dC5pbm5lckhUTUwgPSBwYXN0ZWRUZXh0XG5cbiAgY29uc3QgdGV4dCA9IGhpZGRlbklucHV0LnRleHRDb250ZW50XG5cbiAgJGlucHV0LmlubmVySFRNTCA9IHRleHRcbiAgY29uc29sZS5sb2codGV4dClcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiLCJjb25zdCBtZWRpYUZpbGUgPSByZXF1aXJlKCcuL21lZGlhLmpzJylcblxuLy8gRGV0ZWN0IGlPUyBicm93c2VycyA8IHZlcnNpb24gMTBcbmNvbnN0IG9sZElPUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHBhcnNlRmxvYXQoXG4gICgnJyArICgvQ1BVLipPUyAoWzAtOV9dezMsNH0pWzAtOV9dezAsMX18KENQVSBsaWtlKS4qQXBwbGVXZWJLaXQuKk1vYmlsZS9pLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgWzAsICcnXSlbMV0pXG4gICAgLnJlcGxhY2UoJ3VuZGVmaW5lZCcsICczXzInKS5yZXBsYWNlKCdfJywgJy4nKS5yZXBsYWNlKCdfJywgJycpXG4pIDwgMTAgJiYgIXdpbmRvdy5NU1N0cmVhbVxuXG5jbGFzcyBOb1NsZWVwIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIGlmIChvbGRJT1MpIHtcbiAgICAgIHRoaXMubm9TbGVlcFRpbWVyID0gbnVsbFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgdXAgbm8gc2xlZXAgdmlkZW8gZWxlbWVudFxuICAgICAgdGhpcy5ub1NsZWVwVmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpXG5cbiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAnJylcbiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnNldEF0dHJpYnV0ZSgnc3JjJywgbWVkaWFGaWxlKVxuXG4gICAgICB0aGlzLm5vU2xlZXBWaWRlby5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMubm9TbGVlcFZpZGVvLmN1cnJlbnRUaW1lID4gMC41KSB7XG4gICAgICAgICAgdGhpcy5ub1NsZWVwVmlkZW8uY3VycmVudFRpbWUgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSlcbiAgICB9XG4gIH1cblxuICBlbmFibGUgKCkge1xuICAgIGlmIChvbGRJT1MpIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpXG4gICAgICB0aGlzLm5vU2xlZXBUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHdpbmRvdy5zdG9wLCAwKVxuICAgICAgfSwgMTUwMDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnBsYXkoKVxuICAgIH1cbiAgfVxuXG4gIGRpc2FibGUgKCkge1xuICAgIGlmIChvbGRJT1MpIHtcbiAgICAgIGlmICh0aGlzLm5vU2xlZXBUaW1lcikge1xuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLm5vU2xlZXBUaW1lcilcbiAgICAgICAgdGhpcy5ub1NsZWVwVGltZXIgPSBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnBhdXNlKClcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTm9TbGVlcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbm9zbGVlcC5qcy9zcmMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAnZGF0YTp2aWRlby9tcDQ7YmFzZTY0LEFBQUFJR1owZVhCdGNEUXlBQUFDQUdsemIyMXBjMjh5WVhaak1XMXdOREVBQUFBSVpuSmxaUUFBQ0tCdFpHRjBBQUFDOHdZRi8vL3YzRVhwdmViWlNMZVdMTmdnMlNQdTczZ3lOalFnTFNCamIzSmxJREUwTWlCeU1qUTNPU0JrWkRjNVlUWXhJQzBnU0M0eU5qUXZUVkJGUnkwMElFRldReUJqYjJSbFl5QXRJRU52Y0hsc1pXWjBJREl3TURNdE1qQXhOQ0F0SUdoMGRIQTZMeTkzZDNjdWRtbGtaVzlzWVc0dWIzSm5MM2d5TmpRdWFIUnRiQ0F0SUc5d2RHbHZibk02SUdOaFltRmpQVEVnY21WbVBURWdaR1ZpYkc5amF6MHhPakE2TUNCaGJtRnNlWE5sUFRCNE1Ub3dlREV4TVNCdFpUMW9aWGdnYzNWaWJXVTlNaUJ3YzNrOU1TQndjM2xmY21ROU1TNHdNRG93TGpBd0lHMXBlR1ZrWDNKbFpqMHdJRzFsWDNKaGJtZGxQVEUySUdOb2NtOXRZVjl0WlQweElIUnlaV3hzYVhNOU1DQTRlRGhrWTNROU1DQmpjVzA5TUNCa1pXRmtlbTl1WlQweU1Td3hNU0JtWVhOMFgzQnphMmx3UFRFZ1kyaHliMjFoWDNGd1gyOW1abk5sZEQwd0lIUm9jbVZoWkhNOU5pQnNiMjlyWVdobFlXUmZkR2h5WldGa2N6MHhJSE5zYVdObFpGOTBhSEpsWVdSelBUQWdibkk5TUNCa1pXTnBiV0YwWlQweElHbHVkR1Z5YkdGalpXUTlNQ0JpYkhWeVlYbGZZMjl0Y0dGMFBUQWdZMjl1YzNSeVlXbHVaV1JmYVc1MGNtRTlNQ0JpWm5KaGJXVnpQVE1nWWw5d2VYSmhiV2xrUFRJZ1lsOWhaR0Z3ZEQweElHSmZZbWxoY3owd0lHUnBjbVZqZEQweElIZGxhV2RvZEdJOU1TQnZjR1Z1WDJkdmNEMHdJSGRsYVdkb2RIQTlNU0JyWlhscGJuUTlNekF3SUd0bGVXbHVkRjl0YVc0OU16QWdjMk5sYm1WamRYUTlOREFnYVc1MGNtRmZjbVZtY21WemFEMHdJSEpqWDJ4dmIydGhhR1ZoWkQweE1DQnlZejFqY21ZZ2JXSjBjbVZsUFRFZ1kzSm1QVEl3TGpBZ2NXTnZiWEE5TUM0Mk1DQnhjRzFwYmowd0lIRndiV0Y0UFRZNUlIRndjM1JsY0QwMElIWmlkbDl0WVhoeVlYUmxQVEl3TURBd0lIWmlkbDlpZFdaemFYcGxQVEkxTURBd0lHTnlabDl0WVhnOU1DNHdJRzVoYkY5b2NtUTlibTl1WlNCbWFXeHNaWEk5TUNCcGNGOXlZWFJwYnoweExqUXdJR0Z4UFRFNk1TNHdNQUNBQUFBQU9XV0loQUEzLy9wK0M3djh0RERTVGpmOTd3NTVpM1NiUlBPNFpZK2hrakQ1aGJrQWtMM3pwSjZoL0xSMUNBQUJ6Z0Ixa3FxelVvcmxoUUFBQUF4Qm1pUVlobi8rcVpZQURMZ0FBQUFKUVo1Q1FoWC9BQWo1SVFBRFFHZ2NJUUFEUUdnY0FBQUFDUUdlWVVRbi93QUxLQ0VBQTBCb0hBQUFBQWtCbm1ORUovOEFDeWtoQUFOQWFCd2hBQU5BYUJ3QUFBQU5RWnBvTkV4RFAvNnBsZ0FNdVNFQUEwQm9IQUFBQUF0Qm5vWkZFU3dyL3dBSStTRUFBMEJvSENFQUEwQm9IQUFBQUFrQm5xVkVKLzhBQ3lraEFBTkFhQndBQUFBSkFaNm5SQ2YvQUFzb0lRQURRR2djSVFBRFFHZ2NBQUFBRFVHYXJEUk1Rei8rcVpZQURMZ2hBQU5BYUJ3QUFBQUxRWjdLUlJVc0svOEFDUGtoQUFOQWFCd0FBQUFKQVo3cFJDZi9BQXNvSVFBRFFHZ2NJUUFEUUdnY0FBQUFDUUdlNjBRbi93QUxLQ0VBQTBCb0hBQUFBQTFCbXZBMFRFTS8vcW1XQUF5NUlRQURRR2djSVFBRFFHZ2NBQUFBQzBHZkRrVVZMQ3YvQUFqNUlRQURRR2djQUFBQUNRR2ZMVVFuL3dBTEtTRUFBMEJvSENFQUEwQm9IQUFBQUFrQm55OUVKLzhBQ3lnaEFBTkFhQndBQUFBTlFaczBORXhEUC82cGxnQU11Q0VBQTBCb0hBQUFBQXRCbjFKRkZTd3Ivd0FJK1NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbjNGRUovOEFDeWdoQUFOQWFCd0FBQUFKQVo5elJDZi9BQXNvSVFBRFFHZ2NJUUFEUUdnY0FBQUFEVUdiZURSTVF6LytxWllBRExraEFBTkFhQndBQUFBTFFaK1dSUlVzSy84QUNQZ2hBQU5BYUJ3aEFBTkFhQndBQUFBSkFaKzFSQ2YvQUFzcElRQURRR2djQUFBQUNRR2Z0MFFuL3dBTEtTRUFBMEJvSENFQUEwQm9IQUFBQUExQm03dzBURU0vL3FtV0FBeTRJUUFEUUdnY0FBQUFDMEdmMmtVVkxDdi9BQWo1SVFBRFFHZ2NBQUFBQ1FHZitVUW4vd0FMS0NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbi90RUovOEFDeWtoQUFOQWFCd0FBQUFOUVp2Z05FeERQLzZwbGdBTXVTRUFBMEJvSENFQUEwQm9IQUFBQUF0Qm5oNUZGU3dyL3dBSStDRUFBMEJvSEFBQUFBa0JuajFFSi84QUN5Z2hBQU5BYUJ3aEFBTkFhQndBQUFBSkFaNC9SQ2YvQUFzcElRQURRR2djQUFBQURVR2FKRFJNUXovK3FaWUFETGdoQUFOQWFCd0FBQUFMUVo1Q1JSVXNLLzhBQ1BraEFBTkFhQndoQUFOQWFCd0FBQUFKQVo1aFJDZi9BQXNvSVFBRFFHZ2NBQUFBQ1FHZVkwUW4vd0FMS1NFQUEwQm9IQ0VBQTBCb0hBQUFBQTFCbW1nMFRFTS8vcW1XQUF5NUlRQURRR2djQUFBQUMwR2Voa1VWTEN2L0FBajVJUUFEUUdnY0lRQURRR2djQUFBQUNRR2VwVVFuL3dBTEtTRUFBMEJvSEFBQUFBa0JucWRFSi84QUN5Z2hBQU5BYUJ3QUFBQU5RWnFzTkV4RFAvNnBsZ0FNdUNFQUEwQm9IQ0VBQTBCb0hBQUFBQXRCbnNwRkZTd3Ivd0FJK1NFQUEwQm9IQUFBQUFrQm51bEVKLzhBQ3lnaEFBTkFhQndoQUFOQWFCd0FBQUFKQVo3clJDZi9BQXNvSVFBRFFHZ2NBQUFBRFVHYThEUk1Rei8rcVpZQURMa2hBQU5BYUJ3aEFBTkFhQndBQUFBTFFaOE9SUlVzSy84QUNQa2hBQU5BYUJ3QUFBQUpBWjh0UkNmL0FBc3BJUUFEUUdnY0lRQURRR2djQUFBQUNRR2ZMMFFuL3dBTEtDRUFBMEJvSEFBQUFBMUJtelEwVEVNLy9xbVdBQXk0SVFBRFFHZ2NBQUFBQzBHZlVrVVZMQ3YvQUFqNUlRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZmNVUW4vd0FMS0NFQUEwQm9IQUFBQUFrQm4zTkVKLzhBQ3lnaEFBTkFhQndoQUFOQWFCd0FBQUFOUVp0NE5FeEMvLzZwbGdBTXVTRUFBMEJvSEFBQUFBdEJuNVpGRlN3ci93QUkrQ0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JuN1ZFSi84QUN5a2hBQU5BYUJ3QUFBQUpBWiszUkNmL0FBc3BJUUFEUUdnY0FBQUFEVUdidXpSTVFuLytuaEFBWXNBaEFBTkFhQndoQUFOQWFCd0FBQUFKUVovYVFoUC9BQXNwSVFBRFFHZ2NBQUFBQ1FHZitVUW4vd0FMS0NFQUEwQm9IQ0VBQTBCb0hDRUFBMEJvSENFQUEwQm9IQ0VBQTBCb0hDRUFBMEJvSEFBQUNpRnRiMjkyQUFBQWJHMTJhR1FBQUFBQTFZQ0NYOVdBZ2w4QUFBUG9BQUFIL0FBQkFBQUJBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEQUFBQUdHbHZaSE1BQUFBQUVJQ0FnQWNBVC8vLy92Ny9BQUFGK1hSeVlXc0FBQUJjZEd0b1pBQUFBQVBWZ0lKZjFZQ0NYd0FBQUFFQUFBQUFBQUFIMEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFBeWdBQUFNb0FBQUFBQUNSbFpIUnpBQUFBSEdWc2MzUUFBQUFBQUFBQUFRQUFCOUFBQUJkd0FBRUFBQUFBQlhGdFpHbGhBQUFBSUcxa2FHUUFBQUFBMVlDQ1g5V0FnbDhBQVYrUUFBSy9JRlhFQUFBQUFBQXRhR1JzY2dBQUFBQUFBQUFBZG1sa1pRQUFBQUFBQUFBQUFBQUFBRlpwWkdWdlNHRnVaR3hsY2dBQUFBVWNiV2x1WmdBQUFCUjJiV2hrQUFBQUFRQUFBQUFBQUFBQUFBQUFKR1JwYm1ZQUFBQWNaSEpsWmdBQUFBQUFBQUFCQUFBQURIVnliQ0FBQUFBQkFBQUUzSE4wWW13QUFBQ1ljM1J6WkFBQUFBQUFBQUFCQUFBQWlHRjJZekVBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF5Z0RLQUVnQUFBQklBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWS8vOEFBQUF5WVhaalF3Rk5RQ2ovNFFBYlowMUFLT3lobzN5U1RVQkFRRkFBQUFNQUVBQXI4Z0R4Z3hsZ0FRQUVhTytHOGdBQUFCaHpkSFJ6QUFBQUFBQUFBQUVBQUFBOEFBQUx1QUFBQUJSemRITnpBQUFBQUFBQUFBRUFBQUFCQUFBQjhHTjBkSE1BQUFBQUFBQUFQQUFBQUFFQUFCZHdBQUFBQVFBQU9wZ0FBQUFCQUFBWGNBQUFBQUVBQUFBQUFBQUFBUUFBQzdnQUFBQUJBQUE2bUFBQUFBRUFBQmR3QUFBQUFRQUFBQUFBQUFBQkFBQUx1QUFBQUFFQUFEcVlBQUFBQVFBQUYzQUFBQUFCQUFBQUFBQUFBQUVBQUF1NEFBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQURxWUFBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFBRUFBQXU0QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBRHFZQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUFFQUFBdTRBQUFBQVFBQU9wZ0FBQUFCQUFBWGNBQUFBQUVBQUFBQUFBQUFBUUFBQzdnQUFBQUJBQUE2bUFBQUFBRUFBQmR3QUFBQUFRQUFBQUFBQUFBQkFBQUx1QUFBQUFFQUFEcVlBQUFBQVFBQUYzQUFBQUFCQUFBQUFBQUFBQUVBQUF1NEFBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQUM3Z0FBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFCeHpkSE5qQUFBQUFBQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBRUVjM1J6ZWdBQUFBQUFBQUFBQUFBQVBBQUFBelFBQUFBUUFBQUFEUUFBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBUEFBQUFEUUFBQUEwQUFBQVJBQUFBRHdBQUFBMEFBQUFOQUFBQUVRQUFBQThBQUFBTkFBQUFEUUFBQUJFQUFBQVBBQUFBRFFBQUFBMEFBQUFSQUFBQUR3QUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFQQUFBQURRQUFBQTBBQUFBUkFBQUFEd0FBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBUEFBQUFEUUFBQUEwQUFBQVJBQUFBRHdBQUFBMEFBQUFOQUFBQUVRQUFBQThBQUFBTkFBQUFEUUFBQUJFQUFBQU5BQUFBRFFBQUFRQnpkR052QUFBQUFBQUFBRHdBQUFBd0FBQURaQUFBQTNRQUFBT05BQUFEb0FBQUE3a0FBQVBRQUFBRDZ3QUFBLzRBQUFRWEFBQUVMZ0FBQkVNQUFBUmNBQUFFYndBQUJJd0FBQVNoQUFBRXVnQUFCTTBBQUFUa0FBQUUvd0FBQlJJQUFBVXJBQUFGUWdBQUJWMEFBQVZ3QUFBRmlRQUFCYUFBQUFXMUFBQUZ6Z0FBQmVFQUFBWCtBQUFHRXdBQUJpd0FBQVkvQUFBR1ZnQUFCbkVBQUFhRUFBQUduUUFBQnJRQUFBYlBBQUFHNGdBQUJ2VUFBQWNTQUFBSEp3QUFCMEFBQUFkVEFBQUhjQUFBQjRVQUFBZWVBQUFIc1FBQUI4Z0FBQWZqQUFBSDlnQUFDQThBQUFnbUFBQUlRUUFBQ0ZRQUFBaG5BQUFJaEFBQUNKY0FBQU1zZEhKaGF3QUFBRngwYTJoa0FBQUFBOVdBZ2wvVmdJSmZBQUFBQWdBQUFBQUFBQWY4QUFBQUFBQUFBQUFBQUFBQkFRQUFBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFDc20xa2FXRUFBQUFnYldSb1pBQUFBQURWZ0lKZjFZQ0NYd0FBckVRQUFXQUFWY1FBQUFBQUFDZG9aR3h5QUFBQUFBQUFBQUJ6YjNWdUFBQUFBQUFBQUFBQUFBQUFVM1JsY21WdkFBQUFBbU50YVc1bUFBQUFFSE50YUdRQUFBQUFBQUFBQUFBQUFDUmthVzVtQUFBQUhHUnlaV1lBQUFBQUFBQUFBUUFBQUF4MWNtd2dBQUFBQVFBQUFpZHpkR0pzQUFBQVozTjBjMlFBQUFBQUFBQUFBUUFBQUZkdGNEUmhBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUNBQkFBQUFBQXJFUUFBQUFBQURObGMyUnpBQUFBQUFPQWdJQWlBQUlBQklDQWdCUkFGUUFBQUFBRERVQUFBQUFBQllDQWdBSVNFQWFBZ0lBQkFnQUFBQmh6ZEhSekFBQUFBQUFBQUFFQUFBQllBQUFFQUFBQUFCeHpkSE5qQUFBQUFBQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQVVjM1J6ZWdBQUFBQUFBQUFHQUFBQVdBQUFBWEJ6ZEdOdkFBQUFBQUFBQUZnQUFBT0JBQUFEaHdBQUE1b0FBQU90QUFBRHN3QUFBOG9BQUFQZkFBQUQ1UUFBQS9nQUFBUUxBQUFFRVFBQUJDZ0FBQVE5QUFBRVVBQUFCRllBQUFScEFBQUVnQUFBQklZQUFBU2JBQUFFcmdBQUJMUUFBQVRIQUFBRTNnQUFCUE1BQUFUNUFBQUZEQUFBQlI4QUFBVWxBQUFGUEFBQUJWRUFBQVZYQUFBRmFnQUFCWDBBQUFXREFBQUZtZ0FBQmE4QUFBWENBQUFGeUFBQUJkc0FBQVh5QUFBRitBQUFCZzBBQUFZZ0FBQUdKZ0FBQmprQUFBWlFBQUFHWlFBQUJtc0FBQVorQUFBR2tRQUFCcGNBQUFhdUFBQUd3d0FBQnNrQUFBYmNBQUFHN3dBQUJ3WUFBQWNNQUFBSElRQUFCelFBQUFjNkFBQUhUUUFBQjJRQUFBZHFBQUFIZndBQUI1SUFBQWVZQUFBSHF3QUFCOElBQUFmWEFBQUgzUUFBQi9BQUFBZ0RBQUFJQ1FBQUNDQUFBQWcxQUFBSU93QUFDRTRBQUFoaEFBQUllQUFBQ0g0QUFBaVJBQUFJcEFBQUNLb0FBQWl3QUFBSXRnQUFDTHdBQUFqQ0FBQUFGblZrZEdFQUFBQU9ibUZ0WlZOMFpYSmxid0FBQUhCMVpIUmhBQUFBYUcxbGRHRUFBQUFBQUFBQUlXaGtiSElBQUFBQUFBQUFBRzFrYVhKaGNIQnNBQUFBQUFBQUFBQUFBQUFBTzJsc2MzUUFBQUF6cVhSdmJ3QUFBQ3RrWVhSaEFBQUFBUUFBQUFCSVlXNWtRbkpoYTJVZ01DNHhNQzR5SURJd01UVXdOakV4TURBPSdcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL25vc2xlZXAuanMvc3JjL21lZGlhLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=